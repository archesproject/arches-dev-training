(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{146:function(e,t,n){n(147),n(411),e.exports=n(407)},369:function(e,t,n){var o={"./01-title.md":370,"./02-precourse-knockout.md":371,"./03-precourse-django.md":372,"./04-module1/01-title.md":373,"./04-module1/02-overview/01-app-overview.md":374,"./04-module1/02-overview/02-contributing.md":375,"./04-module1/02-overview/03-major-concepts.md":376,"./04-module1/02-overview/04-extending-arches.md":377,"./04-module1/03-lesson-goals.md":378,"./04-module1/04-arches-design-goals.md":379,"./04-module1/05-core-technologies.md":380,"./04-module1/06-managing-dependencies.md":381,"./04-module1/07-contributing-to-arches.md":382,"./04-module1/08-graphs.md":383,"./04-module1/09-datatypes.md":384,"./04-module1/10-ui-representation.md":385,"./04-module1/11-functions.md":386,"./04-module1/12-code-organization.md":387,"./04-module1/13-packages.md":388,"./05-module2/01-title.md":389,"./05-module2/02-lesson-overview.md":390,"./05-module2/03-datatypes-overview.md":391,"./05-module2/04-datatypes-overview-2.md":392,"./05-module2/05-storage.md":393,"./05-module2/06-storage-2.md":394,"./05-module2/07-code.md":395,"./05-module2/08-code-2.md":396,"./05-module2/09-code-3.md":397,"./05-module2/10-code-4.md":398,"./05-module2/11-when-to-use.md":399,"./09-project-package/01-module9_draft.md":400,"./09-project-package/09-project-package/01-lesson-goals.md":401,"./09-project-package/09-project-package/02-projects-overview.md":402,"./09-project-package/09-project-package/03-projects-directory-structure.md":403,"./09-project-package/09-project-package/04-packages-overview.md":404,"./09-project-package/09-project-package/05-packages-directory-structure.md":405,"./09-project-package/09-project-package/06-packages-details.md":406};function a(e){var t=i(e);return n(t)}function i(e){var t=o[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(o)},a.resolve=i,e.exports=a,a.id=369},370:function(e,t){e.exports='<h1 id="arches-developer-training">Arches Developer Training</h1>\n<h2 id="fall-2018">Fall 2018</h2>\n'},371:function(e,t){e.exports='\x3c!-- sectionTitle: KnockoutJS Intro --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="knockoutjs">KnockoutJS</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this lesson we will briefly discuss each of the following Knockout concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>ViewModels</li>\n<li>Data binding</li>\n<li>Computeds/subscriptions</li>\n<li>Control flow</li>\n<li>Scope</li>\n<li>Components</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<p>To have a basic understanding of KnockoutJS and how the framework is applied in Arches</p>\n<hr>\n<h2 id="what-is-knockout-">What is Knockout?</h2>\n<ul>\n<li>Relatively lightweight library</li>\n<li>Easy to learn</li>\n<li>Non-prescriptive regarding application architecture</li>\n<li>Simple to extend with custom bindings</li>\n<li>Allows users to work on isolated parts of the UI with  &#39;components&#39;  </li>\n</ul>\n<hr>\n<h2 id="a-very-simple-viewmodel">A very simple ViewModel</h2>\n<pre><code class="lang-css">.output {\n    background-color: #ddffdd;\n    width: 150px;\n    margin: 25px;\n}\n</code></pre>\n<pre><code class="lang-html">&lt;label&gt;Artist: &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album: &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;div data-bind=&quot;css: style&quot;&gt;\n    &lt;div data-bind=&quot;text: artist&quot;&gt;&lt;/div&gt;\n    &lt;div data-bind=&quot;text: album&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class="lang-javascript">function ViewModel() {\n    this.artist = ko.observable();\n    this.album = ko.observable();\n    this.style = &#39;output&#39;\n};\n\nko.applyBindings(new ViewModel());\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo1-vm.html">demo</a></p>\n<hr>\n<h2 id="bindings">Bindings</h2>\n<ul>\n<li>text</li>\n<li>textInput</li>\n<li>visible</li>\n<li>css</li>\n<li>style</li>\n<li>attr</li>\n<li>click</li>\n<li>event</li>\n<li>custom binding handlers (if time, more on these later)</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds">Subscriptions/Computeds</h2>\n<ul>\n<li>Subscription - calls a handler when a single observable changes</li>\n<li>Computeds - a function that returns a value if an observable within it changes</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds-viewmodel">Subscriptions/Computeds: ViewModel</h2>\n<pre><code class="lang-javascript">this.artist = ko.observable(&quot;&quot;);\nthis.album = ko.observable(&quot;&quot;);\nthis.recentchange = ko.observable();\nthis.albums = ko.observableArray([]);\n\nthis.addAlbum = function(){\n    this.albums.push({artist: this.artist(), album: this.album()});\n};\n\nthis.albums.subscribe(function(albums){\n    var currentItem = _.last(albums)\n    self.recentchange(&quot;You added &quot; + currentItem.artist + &quot;, &quot; + currentItem.album);\n})\n\nthis.summary = ko.computed(function(){\n    var res = &quot;&lt;ul&gt;&quot;\n    _.map(self.albums(), function(album){\n        res += &quot;&lt;li&gt;Artist: &quot; + album.artist + &quot;,   Album: &quot; + album.album + &quot;&lt;/li&gt;&quot;});\n    res += &quot;&lt;/ul&gt;&quot;\n    return res\n});\n</code></pre>\n<hr>\n<h2 id="subscriptions-computeds-html">Subscriptions/Computeds: HTML</h2>\n<h3 id="we-can-bind-to-our-computed-">We can bind to our computed:</h3>\n<pre><code class="lang-html">&lt;label&gt;Artist:  &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album:  &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;button data-bind=&quot;click: addAlbum&quot;&gt;Add&lt;/button&gt;\n&lt;div data-bind=&quot;html: summary&quot;&gt;&lt;/div&gt; &lt;!-- Our computed --&gt;\n&lt;p data-bind=&quot;text: recentchange&quot;&gt;&lt;/p&gt; &lt;!-- Our subscription updates recentchange --&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo2-bindings.html">demo</a></p>\n<hr>\n<h2 id="control-logic">Control logic</h2>\n<h3 id="inline-and-virtual">Inline and Virtual</h3>\n<pre><code class="lang-html">&lt;div data-bind=&quot;if: someBooleanValue&quot;&gt;&lt;/div&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;This item always appears&lt;/li&gt;\n    &lt;!-- ko ifnot: someBooleanValue --&gt;\n        &lt;li&gt;display this line&lt;/li&gt;\n    &lt;!-- /ko --&gt;\n&lt;/ul&gt;\n\n</code></pre>\n<hr>\n<h2 id="components">Components</h2>\n<ul>\n<li>Composed of template and view model</li>\n<li>Reusable within an application</li>\n<li>Registering a component:<pre><code class="lang-javascript">ko.components.register(&#39;album-list&#39;, {\n  viewModel: {require: &#39;js/album-list&#39;},\n  template: {require: &#39;text!templates/album-list.html&#39;}\n});\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="declaring-a-component">Declaring a component</h2>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {albumlist: albums}\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo3-components-intro.html">demo</a></p>\n<hr>\n<h2 id="using-multiple-components">Using multiple components</h2>\n<h3 id="different-components-can-be-used-to-represent-the-same-data-differently-">Different components can be used to represent the same data differently:</h3>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list-simple&quot;,\n    params: {title: &quot;Component 1&quot;, albumlist: albums}\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {title: &quot;Component 2&quot;, albumlist: albums}\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo4-components.html">demo</a></p>\n<hr>\n<h2 id="reusing-components">Reusing Components</h2>\n<h3 id="components-can-be-reused-within-an-application-with-different-configurations-">Components can be reused within an application with different configurations:</h3>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {title: &quot;Component&quot;, albumlist: albums}\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {title: &quot;Same component&quot;, albumlist: albums, context: &quot;agg&quot;}\n}&#39;&gt;&lt;/div&gt;\n\n&lt;!--ko if: context --&gt;\n    &lt;div style=&quot;padding-top: 10px&quot; data-bind=&quot;text: &#39;Album count: &#39; + albums().length&quot;&gt;&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo5-components.html">demo</a></p>\n'},372:function(e,t){e.exports='\x3c!-- sectionTitle: Django Intro --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="django">Django</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<p><strong>Lesson Overview</strong></p>\n<p>In this lesson we will briefly discuss each of the following Django concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>Projects and Apps</li>\n<li>Settings</li>\n<li>Management Commands</li>\n<li>Models/Proxy Models</li>\n<li>Views</li>\n<li>Templates</li>\n<li>Routing</li>\n</ul>\n<hr>\n<p><strong><em>Lesson Goals</em></strong></p>\n<p>To have a basic understanding of Django and how the framework is applied in Arches</p>\n<p>Django has a great tutorial, but it take longer than this session.\nHowever, if you&#39;re new to Django, it would\nbe worth the time to do it.</p>\n<hr>\n<p><strong>What is Django?</strong></p>\n<h2 id="the-web-framework-for-perfectionists-with-deadlines">The web framework for perfectionists with deadlines</h2>\n<ul>\n<li>Full-featured Python server-side web framework.</li>\n<li>Well documented</li>\n<li>Active community</li>\n<li>It offers:<ul>\n<li>Authentication</li>\n<li>ORM and database migrations</li>\n<li>Template language</li>\n<li>Admin interface</li>\n<li>Internationalization</li>\n<li>Dev server</li>\n<li>GeoDjango (spatial datatypes: Geography and Geometry)</li>\n<li>Email support</li>\n<li>and more ...</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="models">Models</h2>\n<h3 id="django-s-object-representation-of-your-database-schema">Django&#39;s object representation of your database schema</h3>\n<pre><code class="lang-python">class DDataType(models.Model):\n    datatype = models.TextField(primary_key=True)\n    defaultwidget = models.ForeignKey(db_column=&#39;defaultwidget&#39;, to=&#39;Widget&#39;, null=True)\n    isgeometric = models.BooleanField()\n\n    class Meta:\n        managed = True\n        db_table = &#39;d_data_types&#39;\n</code></pre>\n<p><img src="/images/datatype-table.png" alt="Datatype Table"></p>\n<hr>\n<h3 id="views">Views</h3>\n<p>Send data from a model to a template:</p>\n<pre><code class="lang-python">@method_decorator(group_required(&#39;Graph Editor&#39;), name=&#39;dispatch&#39;)\nclass GraphDesignerView(GraphBaseView):\n\n    def get(self, request, graphid):\n        datatypes = models.DDataType.objects.all()\n        context[&#39;datatypes&#39;] = datatypes=datatypes\n        return render(request, &#39;graph-designer.htm&#39;, context)\n</code></pre>\n<p>or just as data:</p>\n<pre><code class="lang-python">class ResourceData(View):\n\n    def get(self, request):\n        datatypes = models.DDataType.objects.all()\n        return JSONResponse(datatypes)\n</code></pre>\n<hr>\n<p>##Templates</p>\n<p>Uses data from a view to render a web page.</p>\n<hr>\n<h2 id="urls">Urls</h2>\n<pre><code class="lang-python">uuid_regex = settings.UUID_REGEX\nurlpatterns = [\n    url(\n        r&#39;^graph_designer/(?P&lt;graphid&gt;%s)$&#39; % uuid_regex,\n        GraphDesignerView.as_view(),\n        name=&#39;graph_designer&#39;\n        ),\n]\n</code></pre>\n<p><a href="http://localhost:8081/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6">http://localhost:8081/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6</a></p>\n<hr>\n<h2 id="virtualenv">VirtualEnv</h2>\n<p>Typically Django projects are run in a virtual environment.  </p>\n<hr>\n<h2 id="settings">Settings</h2>\n<p>settings.py</p>\n<p>Application configuration:</p>\n<pre><code>```python\nDEBUG = True\nDATABASES = {\n    &#39;default&#39;: {\n        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\n        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),\n    }\n}\nLANGUAGE_CODE = &#39;en-us&#39;\nTIME_ZONE = &#39;UTC&#39;\n```\n</code></pre><hr>\n<h2 id="django-projects">Django Projects</h2>\n<pre><code>arches/\n    manage.py\n    arches/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n</code></pre><p>BTW, Arches is a Django Project</p>\n<hr>\n<h2 id="django-apps">Django Apps</h2>\n<p>A project&#39;s functionality can be divided by subject into <code>Apps</code></p>\n<p>The Admin page is a good example of a Django app.</p>\n<h3 id="important-for-django-but-not-so-important-to-understand-arches">Important for Django, but not so important to understand Arches</h3>\n<h3 id="here-s-a-simple-example-">Here&#39;s a simple example:</h3>\n<p>app/\n    <strong>init</strong>.py\n    admin.py\n    apps.py\n    migrations/\n        <strong>init</strong>.py\n    models.py\n    tests.py\n    views.py</p>\n<h2 id="arches-also-contains-but-it-s-complex-">Arches also contains, but it&#39;s complex.</h2>\n'},373:function(e,t){e.exports='\x3c!-- sectionTitle: The Arches Platform --\x3e\n<h1 id="module-1">Module 1</h1>\n<h2 id="the-arches-platform">The Arches Platform</h2>\n<h2 id="and">and</h2>\n<h2 id="core-technical-concepts">Core Technical Concepts</h2>\n'},374:function(e,t){e.exports="\x3c!-- background: jellybean --\x3e\n<p>Arches Application Overview</p>\n<ul>\n<li>Design goals</li>\n<li>Core technologies and system architecture</li>\n</ul>\n"},375:function(e,t){e.exports="<p>Contributing to Arches</p>\n<ul>\n<li>Submitting tickets/zenhub</li>\n<li>Writing documentation</li>\n<li>Code conventions and submitting pull requests</li>\n<li>Developer Code of Conduct</li>\n<li>Where to get more help</li>\n</ul>\n"},376:function(e,t){e.exports="<p>Major Arches Concepts</p>\n<ul>\n<li>Graphs, datatypes, cards, tiles ...</li>\n</ul>\n"},377:function(e,t){e.exports="<p>Extending Arches for your application</p>\n<ul>\n<li>Building custom components (datatypes, widgets, cards, reports)</li>\n<li>Putting it all together: Package development</li>\n</ul>\n"},378:function(e,t){e.exports="<p><strong><em>Lesson Goals</em></strong></p>\n<ul>\n<li>Understand the basic architecture of Arches</li>\n<li>Be familiar with Arches concepts and nomenclature</li>\n<li>Understand how developers contribute to Arches</li>\n<li>Be aware of the ways in which you can extend Arches</li>\n<li>Understand how Arches applications and packages are related</li>\n<li>Know where to find more help</li>\n</ul>\n"},379:function(e,t){e.exports='<p><strong>Design Goals</strong></p>\n<ul>\n<li>Open Source</li>\n<li>Multi-language</li>\n<li>Standards based<ul>\n<li>CRM - Conceptual Reference Model (<a href="http://www.cidoc-crm.org/">http://www.cidoc-crm.org/</a>)</li>\n</ul>\n</li>\n<li>Graph Data Structure<ul>\n<li>Supports concept management</li>\n<li>Allows for a dynamic logical data model (graph) with a static physical model (db schema)</li>\n<li>PostgreSQL(relational + JSON) ideal for its spatial capabilities</li>\n</ul>\n</li>\n<li>Interoperable: Data could be used in other systems</li>\n</ul>\n<p>These qualities make Arches highly adaptable to different use cases and geographic contexts</p>\n'},380:function(e,t){e.exports="<p><strong>Core Technologies and System Architecture</strong></p>\n<ul>\n<li>Django: server-side web framework</li>\n<li>PostgreSQL/PostGIS: Data store of record (as opposed to the Elasticsearch index)</li>\n<li>Elasticsearch (requires Java): Indexes business data to support search</li>\n<li>TileStache: Caches vector and raster tiles</li>\n<li>Knockout.js: UI framework</li>\n</ul>\n"},381:function(e,t){e.exports="<p><strong>Managing dependencies</strong></p>\n<ul>\n<li>Node/Yarn</li>\n<li>Require.js</li>\n</ul>\n"},382:function(e,t){e.exports='<p><strong>Contributing to Arches</strong></p>\n<ul>\n<li><p>Communicating about development issues:</p>\n<ul>\n<li>Ask questions on the forum: <a href="https://groups.google.com/forum/#!forum/archesproject">https://groups.google.com/forum/#!forum/archesproject</a></li>\n<li>Write a ticket on GitHub: <a href="https://github.com/archesproject/arches">https://github.com/archesproject/arches</a></li>\n</ul>\n</li>\n<li><p>Coding Conventions:</p>\n<ul>\n<li>PEP 8</li>\n<li>ESlint: &#39;recommended&#39;</li>\n</ul>\n</li>\n<li><p>Writing documentation:</p>\n<ul>\n<li>Documentation is in a dedicated repo</li>\n<li>Written in restructured text</li>\n<li>Converted to HTML using Sphinx</li>\n</ul>\n</li>\n<li><p>Submitting pull requests:</p>\n</li>\n<li><p>Developer Code of Conduct</p>\n</li>\n</ul>\n'},383:function(e,t){e.exports="<p><strong>Graphs</strong></p>\n<ul>\n<li>Resource Models<ul>\n<li>The blueprint of a resource instance</li>\n<li>Conceptually similar to a class in an object-oriented programming language</li>\n<li>Composed of a root node and one or more branches</li>\n</ul>\n</li>\n<li>Branches<ul>\n<li>Building blocks of a resource model</li>\n<li>Generally composed of nodes of a particular theme</li>\n<li>Nodes on a branch that share the same parent comprise a Nodegroup</li>\n</ul>\n</li>\n<li>Nodes<ul>\n<li>The smallest unit of a resource model</li>\n<li>Semantic or data collecting</li>\n</ul>\n</li>\n<li>Edges<ul>\n<li>Relationships between nodes.</li>\n<li>In some cases has a relationship with its parent defined</li>\n</ul>\n</li>\n</ul>\n"},384:function(e,t){e.exports="<p><strong>Datatypes</strong></p>\n<p>Defines how data is managed for a node</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Date</li>\n<li>EDTF</li>\n<li>Concept</li>\n<li>Domain</li>\n<li>GeoJson</li>\n</ul>\n<p><strong><em>Example operations</em></strong></p>\n<ul>\n<li>Validation</li>\n<li>Transforming data when indexed in Elasticsearch</li>\n<li>Transforming data on import and export</li>\n<li>Defines search filters for its type</li>\n</ul>\n"},385:function(e,t){e.exports='<p><strong>UI Representation</strong></p>\n<ul>\n<li>Cards - UI representation of a <strong>nodegroups</strong></li>\n<li>Widgets - UI representation of a <strong>node</strong> based on datatype</li>\n<li>A datatype can be represented by different widgets</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">datatype</th>\n<th style="text-align:center">widgets</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">boolean</td>\n<td style="text-align:center">radio, switch, select</td>\n</tr>\n<tr>\n<td style="text-align:center">string</td>\n<td style="text-align:center">input, rich text editor</td>\n</tr>\n<tr>\n<td style="text-align:center">domain</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n<tr>\n<td style="text-align:center">concept</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n</tbody>\n</table>\n'},386:function(e,t){e.exports="<p><strong>Functions</strong></p>\n<p>Custom data processing operations triggered when Arches retrieves, saves, or deletes data belonging to a specified nodegroup.</p>\n<p>Conceptually similar to a database trigger.</p>\n<p>Ships with Arches: The display descriptors function</p>\n"},387:function(e,t){e.exports="<p><strong>Code organization</strong></p>\n<p>If you&#39;re comfortable with Django, Arches will look very familiar</p>\n<p>Django template file paths and names generally match their javascript counterparts:</p>\n<ul>\n<li>arches/app/templates/views/components/widgets/number.htm</li>\n<li>arches/app/media/js/views/components/widgets/number.js</li>\n</ul>\n"},388:function(e,t){e.exports="<p><strong>Packages</strong></p>\n<p>Organization of files used to implement an Arches application</p>\n<ul>\n<li>Business data</li>\n<li>Resource models and branches</li>\n<li>Custom cards, datatypes, widgets, report templates</li>\n</ul>\n<p>In contrast, a <strong><em>Project</em></strong> is essentially a Django <code>project</code>.</p>\n"},389:function(e,t){e.exports='\x3c!-- sectionTitle: Module 2: Introduction to Datatypes --\x3e\n<h1 id="module-2">Module 2</h1>\n<h2 id="introduction-to-datatypes">Introduction to Datatypes</h2>\n'},390:function(e,t){e.exports='<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>review what datatypes are in Arches<ul>\n<li>what can they do?</li>\n<li>where are datatypes registered?</li>\n<li>what are they in code?</li>\n<li>when do I need a new datatype?</li>\n</ul>\n</li>\n<li>look at code for datatypes built into Arches</li>\n</ul>\n'},391:function(e,t){e.exports='<h2 id="what-are-datatypes-">What are datatypes?</h2>\n<ul>\n<li>a way of representing values in Arches resources</li>\n<li>Arches includes sensible defaults:<ul>\n<li>string</li>\n<li>number</li>\n<li>date</li>\n<li>etc...</li>\n</ul>\n</li>\n<li>consist of backend code for managing data</li>\n<li>can optionally include a front end configuration component</li>\n</ul>\n'},392:function(e,t){e.exports='<h2 id="what-can-datatypes-do-">What can datatypes do?</h2>\n<ul>\n<li>validate incoming data before saving values</li>\n<li>transform values for import/export</li>\n<li>index data to ElasticSearch</li>\n<li>query data in ElasticSearch for advanced searching</li>\n<li>handle incoming request objects (to save files, for example)</li>\n<li>execute logic after data are saved</li>\n<li>provides hooks for Arches native geospatial features<ul>\n<li>tileserver layers</li>\n<li>map overlays</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n'},393:function(e,t){e.exports='<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>Arches stores datatypes in PostgreSQL, in a table called <code>d_data_types</code>, for example...</p>\n<h3 id="query">Query</h3>\n<pre><code class="lang-SQL">SELECT * FROM d_data_types WHERE datatype = &#39;boolean&#39;;\n</code></pre>\n<h3 id="results">Results</h3>\n<div class="db-results">\n    <table>\n        <thead>\n            <tr>\n                <th style="text-align:left">datatype</th>\n                <th style="text-align:left">iconclass</th>\n                <th style="text-align:left">modulename</th>\n                <th style="text-align:left">classname</th>\n                <th style="text-align:left">configcomponent</th>\n                <th style="text-align:left">defaultconfig</th>\n                <th style="text-align:left">configname</th>\n                <th style="text-align:left">isgeometric</th>\n                <th style="text-align:left">defaultwidget</th>\n                <th style="text-align:left">issearchable</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td style="text-align:left">boolean</td>\n                <td style="text-align:left">fa fa-toggle-on</td>\n                <td style="text-align:left">datatypes.py</td>\n                <td style="text-align:left">BooleanDataType</td>\n                <td style="text-align:left">views/components/datatypes/boolean</td>\n                <td style="text-align:left">{&quot;trueLabel&quot;:&quot;Yes&quot;,&quot;falseLabel&quot;:&quot;No&quot;}</td>\n                <td style="text-align:left">boolean-datatype-config</td>\n                <td style="text-align:left">false</td>\n                <td style="text-align:left">10000000-0000-0000-0000-000000000006</td>\n                <td style="text-align:left">true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'},394:function(e,t){e.exports='<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>The <code>d_data_types</code> table has the following columns:</p>\n<ul>\n<li><code>datatype</code> [string]: the name of the datatype, also the primary key</li>\n<li><code>iconclass</code> [string]: a class (or classes) to be used to render an icon for this datatype</li>\n<li><code>modulename</code> [string]: the python module that defines this datatype</li>\n<li><code>classname</code> [string]: the class that defines this datatype</li>\n<li><code>configcomponent</code> [string]: an optional path to a KO component for configuration</li>\n<li><code>defaultconfig</code> [JSON]: the default configuration for nodes using this datatype</li>\n<li><code>configname</code> [string]: the name of a KO component for configuration</li>\n<li><code>isgeometric</code> [boolean]: use this datatype on maps</li>\n<li><code>defaultwidget</code> [UUID]: a foreign key to the default widget to use with this datatype</li>\n<li><code>issearchable</code> [boolean]: use this datatype in advanced search</li>\n</ul>\n'},395:function(e,t){e.exports='<h2 id="what-are-datatypes-in-code-">What are datatypes in code?</h2>\n<ul>\n<li>Arches represents datatypes on the backend as a Python class<ul>\n<li>should extend <code>arches.app.datatypes.base.BaseDataType</code></li>\n<li>is responsible for all datatype logic</li>\n<li><code>d_data_types.classname</code> defines this class</li>\n<li>module containing this class (<code>d_data_types.modulename</code>) must be in a path contained in <code>settings.DATATYPE_LOCATIONS</code></li>\n</ul>\n</li>\n<li>datatypes can also (optionally) include a Knockout component, used for:<ul>\n<li>configuring nodes to use a datatype</li>\n<li>searching for values of a given datatype in advanced search</li>\n</ul>\n</li>\n</ul>\n'},396:function(e,t){e.exports='<h3 id="example-booleandatatype-class">Example: BooleanDataType Class</h3>\n<pre><code class="lang-python">class BooleanDataType(BaseDataType):\n\n    def validate(self, value, row_number=None, source=&#39;&#39;):\n        errors = []\n\n        try:\n            type(bool(distutils.util.strtobool(str(value)))) is True\n        except:\n            errors.append({\n                &#39;type&#39;: &#39;ERROR&#39;,\n                &#39;message&#39;: &#39;{0} is not of type boolean. This data was not imported.&#39;.format(value)\n            })\n\n        return errors\n\n    def transform_import_values(self, value, nodeid):\n        return bool(distutils.util.strtobool(str(value)))\n\n    def append_search_filters(self, value, node, query, request):\n        try:\n            if value[&#39;val&#39;] != &#39;&#39;:\n                term = True if value[&#39;val&#39;] == &#39;t&#39; else False\n                query.must(Term(field=&#39;tiles.data.%s&#39; % (str(node.pk)), term=term))\n        except KeyError, e:\n            pass\n</code></pre>\n'},397:function(e,t){e.exports='<h3 id="example-booleandatatype-widget-js">Example: BooleanDataType widget JS</h3>\n<pre><code class="lang-javascript">define([&#39;knockout&#39;], function(ko) {\n    var name = &#39;boolean-datatype-config&#39;;\n    ko.components.register(name, {\n        viewModel: function(params) {\n            var self = this;\n            var config = params.config ? params.config : params.node.config;\n\n            this.search = params.search;\n            this.graph = params.graph;\n            this.trueLabel = config.trueLabel;\n            this.falseLabel = config.falseLabel;\n\n            if (this.search) {\n                var filter = params.filterValue();\n                this.searchValue = ko.observable(filter.val || &#39;&#39;);\n                this.filterValue = ko.computed(function() {\n                    return {\n                        val: self.searchValue()\n                    };\n                });\n                params.filterValue(this.filterValue());\n                this.filterValue.subscribe(function(val) {\n                    params.filterValue(val);\n                });\n            }\n        },\n        template: { require: &#39;text!datatype-config-templates/boolean&#39; }\n    });\n    return name;\n});\n</code></pre>\n'},398:function(e,t){e.exports='<h3 id="example-booleandatatype-widget-html">Example: BooleanDataType widget HTML</h3>\n<pre><code class="lang-html">{% load i18n %}\n\n&lt;!-- ko if: $data.search --&gt;\n{% block search %}\n&lt;div class=&quot;col-sm-12&quot;&gt;\n    &lt;select class=&quot;resources&quot; data-bind=&quot;value: searchValue, chosen: {\n        width: &#39;100%&#39;,\n        disable_search_threshold: 15\n    }, options: [\n        {id: &#39;t&#39;, name: trueLabel},\n        {id: &#39;f&#39;, name: falseLabel}\n    ], optionsText: &#39;name&#39;, optionsValue: &#39;id&#39;&quot;&gt;&lt;/select&gt;\n&lt;/div&gt;\n{% endblock search %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: $data.graph --&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;True&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: trueLabel&quot;&gt;\n&lt;/div&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;False&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: falseLabel&quot;&gt;\n&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n'},399:function(e,t){e.exports='<h2 id="use-a-custom-datatype-when-">Use a custom datatype when...</h2>\n<ul>\n<li>you need to store data structures not currently supported in Arches</li>\n<li>you need to implement custom logic for:<ul>\n<li>validation</li>\n<li>ElasticSearch indexing/querying</li>\n<li>import/export</li>\n<li>handling requests</li>\n</ul>\n</li>\n</ul>\n'},400:function(e,t){e.exports='\x3c!-- sectionTitle: Projects and Packages --\x3e\n<h1 id="module-9">Module 9</h1>\n<h2 id="projects-and-packages">Projects and Packages</h2>\n'},401:function(e,t){e.exports="<p><strong><em>Lesson Goals</em></strong></p>\n<ul>\n<li>To understand the distinction between a project and a package</li>\n<li>To be familiar with the directory structure of a project and a package</li>\n<li>To understand how to create and maintain your own project and/or package</li>\n<li>To understand how Arches applications and packages are related</li>\n<li>To know how to host and contribute to a project or package</li>\n</ul>\n"},402:function(e,t){e.exports='<p><strong>Projects</strong></p>\n<ul>\n<li>Projects facilitate all of the customizations that you will need to make one installation of Arches different from the next</li>\n<li>You can update html to modify web page branding, and add functions, datatypes, and widgets to introduce new functionality</li>\n<li>A project sits outside of your virtual environment, and can thus be transferred to any other system where Arches is installed\n(source: arches documentation, <a href="https://arches.readthedocs.io/en/stable/projects-and-packages/#projects">https://arches.readthedocs.io/en/stable/projects-and-packages/#projects</a>)</li>\n<li>Contains your site specific django settings<ul>\n<li>(show hierarchy of settings files and how the inheritance structure works)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Many project-specific settings are defined in settings.py. You should use settings_local.py to store variables that you may want to keep out of the public eye (db passwords, API keys, etc.).</li>\n<li>The templates directory holds HTML templates that you can modify to customize the branding and general appearance of your project.</li>\n</ul>\n'},403:function(e,t){e.exports="<p><strong>Project Directory Structure</strong></p>\n<pre><code>Example Project\n├── datatypes\n├── functions\n├── logs\n├── media\n│   ├── img\n│   │   └── landing\n│   ├── js\n│   │   ├── reports\n│   │   └── views\n│   │       └── components\n│   └── packages\n├── node_modules\n├── system_settings\n├── templates\n│   └── views\n│       └── components\n│           ├── functions\n│           └── widgets\n├── uploadedfiles\n└── widgets\n</code></pre>"},404:function(e,t){e.exports="<p><strong>Packages</strong></p>\n<ul>\n<li>A package contains all the data you&#39;d like loaded into your Arches implementation<ul>\n<li>business data</li>\n<li>concepts/reference data</li>\n<li>resource models/branches</li>\n<li>datatypes/functions/widgets</li>\n<li>map layers</li>\n</ul>\n</li>\n<li>Each of these components can be loaded separately</li>\n<li>The whole package can be loaded from local file system or directly from github</li>\n<li>Also contains package specific settings (e.g. load order of business data, date format of business data)</li>\n<li>A local package may be updated if you make changes in your deployment of Arches (eg changes to branches and/or resource models)</li>\n</ul>\n"},405:function(e,t){e.exports="<p><strong>Package Directory Structure</strong></p>\n<pre><code>Example Package\n├── business_data\n│   ├── files\n│   └── relations\n├── extensions\n│   ├── datatypes\n│   ├── functions\n│   └── widgets\n├── graphs\n│   ├── branches\n│   └── resource_models\n├── map_layers\n│   ├── mapbox_spec_json\n│   │   ├── basemaps\n│   │   └── overlays\n│   └── tile_server\n│       ├── basemaps\n│       └── overlays\n├── preliminary_sql\n├── reference_data\n│   ├── collections\n│   └── concepts\n├── staging_data\n└── system_settings\n</code></pre>"},406:function(e,t){e.exports="<p><strong>Package Config vs Package Settings</strong></p>\n<p>Package Settings</p>\n<ul>\n<li>The django settings relevant to your project not managed in system settings. For example, you may want to include your time wheel configuration and your analysis SRID settings in this file so that users do not have add these settings manually to their own settings file after loading your package. This file is copied into your project when the package is loaded.</li>\n</ul>\n<p>Package Config</p>\n<ul>\n<li>This file allows you to configure other parts of the data loading process. For example, the order in which the business data files are loaded</li>\n</ul>\n"},408:function(e,t,n){var o=n(409);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(51)(o,a);o.locals&&(e.exports=o.locals)},409:function(e,t,n){}},[[146,5,3]],[4]]);