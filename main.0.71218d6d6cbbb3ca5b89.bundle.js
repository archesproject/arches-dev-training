(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{146:function(e,n,t){t(147),t(390),t(384),e.exports=t(385)},369:function(e,n,t){var o={"./00-title.md":370,"./01-precourse-a-deployment.md":371,"./02-precourse-b-knockout.md":372,"./03-precourse-c-django.md":373,"./04-module-01.md":374,"./05-module-02.md":375,"./06-module-03.md":376,"./07-module-04.md":377,"./08-module-05.md":378,"./09-module-06.md":379,"./10-module-07.md":380,"./11-module-08.md":381,"./12-module-09.md":382,"./13-module-10.md":383};function a(e){var n=i(e);return t(n)}function i(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(o)},a.resolve=i,e.exports=a,a.id=369},370:function(e,n){e.exports='<h1 id="arches-developer-training">Arches Developer Training</h1>\n<h2 id="fall-2018">Fall 2018</h2>\n'},371:function(e,n){e.exports='\x3c!-- sectionTitle: Pre-course A: Deployment Considerations --\x3e\n<h1 id="arches-deployment-considerations">Arches Deployment Considerations</h1>\n<h2 id="background-information">Background Information</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this module we will briefly discuss hosting considerations for Arches \ndeployment, a few of the decision points, and provide abundant links for further\nresearch and exploration. </p>\n<h4 id="topics-">Topics:</h4>\n<ul>\n<li>Deployment Considerations</li>\n<li>Platform Options</li>\n<li>High Usage optimization options</li>\n<li>Hosted Examples</li>\n<li>Takeaway</li>\n</ul>\n<hr>\n<h2 id="deployment-considerations-">Deployment considerations:</h2>\n<ul>\n<li>What are the organizational specific considerations?<ul>\n<li>Are there institutional hosting requirements? Is in-house hosting required? Is there sufficient in-house resources to manage an in-house solution? Is there existing in-house expertise in hosting?</li>\n<li>Is there existing in-house experience with a specific cloud? AWS? Azure?</li>\n</ul>\n</li>\n<li>How much usage is expected?<ul>\n<li>How many people will be searching? editing? creating reports?</li>\n</ul>\n</li>\n<li>What Resource Models being used?<ul>\n<li>Is the data file heavy (Images, PDFs, etc)?</li>\n<li>How deeply nested is the Resource Model?</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="platform-options-location">Platform Options: Location</h2>\n<ul>\n<li>In House:<ul>\n<li>Requires managing physical servers and networking infrastructure</li>\n<li>Requires higher quality internet connection to the server</li>\n<li>Less flexible to grow with increase in usage</li>\n<li>Often has a fixed up front cost</li>\n</ul>\n</li>\n<li>Cloud Hosting:<ul>\n<li>Requires managing virtual servers</li>\n<li>Requires specific training for different cloud platforms</li>\n<li>More flexible to grow with increase in usage</li>\n<li>Often has an ongoing monetary cost</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="platform-options-architecture">Platform Options: Architecture</h2>\n<ul>\n<li>Single Server:<ul>\n<li>Simple deployment and setup</li>\n<li>Allows all Arches dependancies to be easily accessible on one server</li>\n<li>Less flexible to grow with increase in usage</li>\n</ul>\n</li>\n<li>Distributed Architecture:<ul>\n<li>More complex deployment and setup</li>\n<li>Can lower costs with running multiple instances of Arches</li>\n<li>Higher performance</li>\n<li>More flexible to grow with increase in usage</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="platform-options-operating-system">Platform Options: Operating System</h2>\n<p>All platforms require specific knowledge and experience to maintain. </p>\n<p>Each platform has both positives and negatives associated with them.</p>\n<ul>\n<li>Linux:<ul>\n<li>Most widely supported and used OS to host Arches</li>\n<li>All Arches dependancies have been tested and work as expected</li>\n</ul>\n</li>\n<li>Docker:<ul>\n<li>Obfuscates management commands in a container</li>\n<li>Can be hosted on Container Platforms</li>\n</ul>\n</li>\n<li>Windows:<ul>\n<li>Least used OS to host Arches.</li>\n<li>Some features are not available, including generating Raster Tiles</li>\n<li>Difficult to set up, must use IIS.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="platform-options-web-server">Platform Options: Web Server</h2>\n<ul>\n<li>Apache:<ul>\n<li>Traditional Open Source Web Server</li>\n<li>Everything and the kitchen sink</li>\n<li><a href="https://arches.readthedocs.io/en/stable/serving-arches-with-apache/">Serving Arches with Apache</a> </li>\n</ul>\n</li>\n<li>Nginx:<ul>\n<li>Currently used with provided Docker-Compose</li>\n<li>New. Lean. Small.</li>\n<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04">Serving django with nginx</a> </li>\n</ul>\n</li>\n<li>IIS (Windows only):<ul>\n<li>Currently must be used when installing on Arches on Windows</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="platform-options-cloud-services">Platform Options: Cloud Services</h2>\n<p>All Cloud Services require specific knowledge and experience to maintain.</p>\n<p>Each Cloud Service has both positives and negatives associated with them.</p>\n<ul>\n<li>AWS:<ul>\n<li>Farallon&#39;s hosting service of choice</li>\n<li><a href="https://aws.amazon.com/rds/">Hosted PostgreSQL (RDS)</a>, <a href="https://aws.amazon.com/elasticsearch-service/">Hosted ElasticSearch</a>, <a href="https://aws.amazon.com/s3/">Hosted Data Storage</a></li>\n</ul>\n</li>\n<li>Azure:<ul>\n<li><a href="https://azure.microsoft.com/en-us/services/postgresql/">Hosted PostgreSQL</a></li>\n<li>Can be integrated with internal Microsoft Resources such as Active Directory</li>\n</ul>\n</li>\n<li>Others (DigitalOcean, Google Cloud, ...):<ul>\n<li>Unknown ability to host Arches in a distributed manner</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="best-practice-for-deployments">Best Practice for Deployments</h2>\n<ul>\n<li>SSL/Encryption<ul>\n<li>The web is moving towards encryption. Deploy with an SSL certificate! See <a href="https://letsencrypt.org/">Let&#39;s Encrypt</a>.</li>\n</ul>\n</li>\n<li>Projects/Packages:<ul>\n<li>Arches supports the loading of Packages into Projects. Host the Package in a git repo and use the <a href="https://arches.readthedocs.io/en/stable/command-line-reference/#loading-a-package-into-a-project"><code>load_package</code></a> command.</li>\n</ul>\n</li>\n<li>Back up. Back up. Back up.</li>\n<li>Ensure PostgreSQL is properly setup and tuned with sufficient security settings.</li>\n<li>Ensure <a href="https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/#email-backend-and-related-settings">sending of emails</a> has been configured correctly </li>\n<li>Set up monitoring. On AWS, See <a href="https://aws.amazon.com/cloudwatch/">Cloudwatch</a></li>\n</ul>\n<hr>\n<h2 id="optimization-for-deployment">Optimization for Deployment</h2>\n<ul>\n<li>PostgreSQL<ul>\n<li>Setup Logging, Autovacuuming, tweak <code>work_mem</code>. Consider running a Hosted PostgreSQL setup to avoid too much tweaking. </li>\n</ul>\n</li>\n<li>Projects/Packages:<ul>\n<li>Arches supports the loading of Packages into Projects. Host the Package in a git repo and use the <a href="https://arches.readthedocs.io/en/stable/command-line-reference/#loading-a-package-into-a-project"><code>load_package</code></a> command.</li>\n</ul>\n</li>\n<li>Set up and tune <a href="https://docs.djangoproject.com/en/1.11/topics/cache/">django caching</a> through testing.</li>\n</ul>\n<hr>\n<h2 id="example-deployments">Example Deployments</h2>\n<ul>\n<li>Lincoln Arcade - <a href="https://arcade.lincoln.gov.uk">https://arcade.lincoln.gov.uk</a><ul>\n<li>Distributed Architecture</li>\n</ul>\n</li>\n<li>Arches V4 Demo Site - <a href="http://v4demo.archesproject.org">http://v4demo.archesproject.org</a><ul>\n<li>Single Server</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="deployment-takeaways">Deployment Takeaways</h2>\n<ul>\n<li>Every deployment is different. <ul>\n<li>There are a lot of decisions to be made regarding production deployments, ranging from usage, redundancy requirements, to the complexity of resource models.</li>\n</ul>\n</li>\n<li>The Arches Development Team typically follows the following patterns:<ul>\n<li>Cloud Hosting solution unless your organization requires In House hosting</li>\n<li>Distributed Architecture provides a more robust ability to expand with usage and re-use resources.</li>\n<li>Linux/Docker allows quick deployment and dependancies that have been tested to work.</li>\n<li>AWS is the cloud that is most widely used among the Development Team.</li>\n</ul>\n</li>\n<li>See <a href="https://www.archesproject.org/implementation-considerations/">Arches Implementation Considerations</a></li>\n</ul>\n<hr>\n<h2 id="further-reading">Further Reading</h2>\n<p>Django on AWS:</p>\n<ul>\n<li><a href="https://aws.amazon.com/getting-started/projects/deploy-python-application/">Deploy a highly available Python Web App on AWS</a></li>\n<li><a href="https://www.agiliq.com/blog/2014/08/deploying-a-django-app-on-amazon-ec2-instance/">Deploying a Django app on Amazon EC2 instance (includes autoscaling and load balancing)</a></li>\n<li><a href="https://www.scribd.com/doc/54883641/Scaling-Django-Apps-With-Amazon-AWS">Scaling django on AWS</a>\nUsing AWS S3:</li>\n<li><a href="https://github.com/archesproject/arches/wiki/Storing-Media-on-AWS-S3">Storing Media on AWS S3 (Arches Wiki)</a></li>\n<li><a href="https://groups.google.com/forum/#!topic/archesproject/QHKqMISRkV8">Deleting S3 assets for Arches (Arches Forum)</a>\nMonitoring: </li>\n<li><a href="http://www.kidstrythisathome.com/2017/03/django-logging-with-aws-cloudwatch-and-watchtower.html">Setup django with AWS Cloudwatch</a></li>\n</ul>\n'},372:function(e,n){e.exports='\x3c!-- sectionTitle: Pre-course B: KnockoutJS --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="knockoutjs">KnockoutJS</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this lesson we will briefly discuss each of the following Knockout concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>View Models</li>\n<li>Data binding</li>\n<li>Computeds &amp; subscriptions</li>\n<li>Control flow</li>\n<li>Scope</li>\n<li>Components</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<p>To gain a basic understanding of what KnockoutJS is and how the framework is used in Arches</p>\n<hr>\n<h2 id="what-is-knockout-">What is Knockout?</h2>\n<ul>\n<li>JavaScript library for building web applications</li>\n<li><a href="https://knockoutjs.com/documentation/introduction.html">Documentation can be found here</a></li>\n<li><a href="http://learn.knockoutjs.com/">There are also some good tutorials</a></li>\n<li>Easy to learn</li>\n<li>Non-prescriptive regarding application architecture</li>\n<li>Simple to extend with custom bindings</li>\n<li>Allows users to work on isolated parts of the UI with &quot;components&quot;</li>\n</ul>\n<hr>\n<h2 id="model-view-view-model-mvvm-">Model-View-View Model (MVVM)</h2>\n<p>MVVM is a design pattern for building complex applications. KnockoutJS uses this pattern</p>\n<ul>\n<li><strong>model</strong>: &quot;your application’s stored data.&quot;</li>\n<li><strong>view model</strong>: &quot;a pure-code representation of the data and operations on a UI&quot;</li>\n<li><strong>view</strong>: &quot;a visible, interactive UI representing the state of the view model.&quot; (&quot;your HTML document&quot;)</li>\n</ul>\n<hr>\n<h2 id="a-very-simple-view-model">A very simple View Model</h2>\n<pre><code class="lang-css">.output {\n    background-color: #ddffdd;\n    margin: 25px;\n}\n</code></pre>\n<pre><code class="lang-html">&lt;label&gt;Artist: &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album: &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;div class=&quot;output&quot;&gt;\n    &lt;div data-bind=&quot;text: artist&quot;&gt;&lt;/div&gt;\n    &lt;div data-bind=&quot;text: album&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class="lang-javascript">function ViewModel() {\n    this.artist = ko.observable();\n    this.album = ko.observable();\n};\n\nko.applyBindings(new ViewModel());\n</code></pre>\n<p><a href="https://codepen.io/fargeo/pen/KGgpYz">demo 1</a></p>\n<hr>\n<h2 id="bindings">Bindings</h2>\n<ul>\n<li><code>text</code></li>\n<li><code>textInput</code></li>\n<li><code>visible</code></li>\n<li><code>css</code></li>\n<li><code>style</code></li>\n<li><code>attr</code></li>\n<li><code>click</code></li>\n<li><code>event</code></li>\n<li>custom binding handlers</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds">Subscriptions &amp; Computeds</h2>\n<ul>\n<li>Subscription - calls a handler when a single observable changes</li>\n<li>Computeds - a function that returns a value if an observable within it changes</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds-view-model">Subscriptions &amp; Computeds: View Model</h2>\n<pre><code class="lang-javascript">var self = this;\nthis.artist = ko.observable(&quot;&quot;);\nthis.album = ko.observable(&quot;&quot;);\nthis.albums = ko.observableArray([]);\n\nthis.addAlbum = function(){\n    self.albums.push({\n        artist: self.artist(),\n        album: self.album()\n    });\n};\n\nthis.albums.subscribe(function(albums){\n    console.log(&#39;albums added:&#39;, albums);\n});\n\nthis.lastChange = ko.computed(function() {    \n    var albums = self.albums();\n    if (albums.length &gt; 0) {\n        var currentItem = albums[albums.length-1];\n        return &quot;You added &quot; + currentItem.artist + &quot;, &quot; + currentItem.album;\n    }\n    return &#39;&#39;;\n});\n</code></pre>\n<hr>\n<h2 id="subscriptions-computeds-html">Subscriptions &amp; Computeds: HTML</h2>\n<p>We can bind to our computed, as we would with an observable:</p>\n<pre><code class="lang-html">&lt;label&gt;Artist:  &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album:  &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;button data-bind=&quot;click: addAlbum&quot;&gt;Add&lt;/button&gt;\n&lt;p data-bind=&quot;text: lastChange&quot;&gt;&lt;/p&gt; &lt;!-- Our computed --&gt;\n</code></pre>\n<p><a href="https://codepen.io/fargeo/pen/ePdNov">demo 2</a></p>\n<hr>\n<h2 id="control-flow">Control flow</h2>\n<ul>\n<li>Knockout provides bindings for managing control flow</li>\n<li><code>foreach</code>, <code>if</code>, <code>ifnot</code>, <code>with</code></li>\n<li>can be &quot;virtual&quot; (as comments) or inline (via <code>data-bind</code>)</li>\n</ul>\n<pre><code class="lang-html">&lt;div data-bind=&quot;if: someBooleanValue&quot;&gt;&lt;/div&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;This item always appears&lt;/li&gt;\n    &lt;!-- ko ifnot: someBooleanValue --&gt;\n        &lt;li&gt;display this line&lt;/li&gt;\n    &lt;!-- /ko --&gt;\n&lt;/ul&gt;\n\n</code></pre>\n<hr>\n<h2 id="components">Components</h2>\n<ul>\n<li>Composed of a template and a view model</li>\n<li>Reusable within an application</li>\n<li>Registering a component:<pre><code class="lang-javascript">ko.components.register(&#39;album-list&#39;, {\n  viewModel: {\n      require: &#39;js/album-list&#39;\n  },\n  template: {\n      require: &#39;text!templates/album-list.html&#39;\n  }\n});\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="declaring-a-component">Declaring a component</h2>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://codepen.io/fargeo/pen/dgpoLj">demo 3</a></p>\n<hr>\n<h2 id="using-multiple-components">Using multiple components</h2>\n<p>Different components can be used to represent the same data differently:</p>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list-simple&quot;,\n    params: {\n        title: &quot;Component 1&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Component 2&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://codepen.io/fargeo/pen/GYjJLe">demo 4</a></p>\n<hr>\n<h2 id="reusing-components">Reusing Components</h2>\n<p>Components can be reused within an application with different data &amp; configurations:</p>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Component&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Same component&quot;,\n        albumlist: albums,\n        showCount: true\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<pre><code class="lang-html">&lt;!--ko if: showCount --&gt;\n    &lt;div style=&quot;padding-top: 10px&quot; data-bind=&quot;text: &#39;Album count: &#39; + albums().length&quot;&gt;&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n<p><a href="https://codepen.io/fargeo/pen/wYzabw">demo 5</a></p>\n'},373:function(e,n){e.exports='\x3c!-- sectionTitle: Pre-course C: Django --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="django">Django</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this lesson we will briefly discuss each of the following Django concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>Models/Proxy Models</li>\n<li>Views</li>\n<li>Routing</li>\n<li>Templates</li>\n<li>Projects</li>\n<li>Settings</li>\n<li>Apps</li>\n<li>Management Commands</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<p>To have a basic understanding of Django and how the framework is applied in Arches</p>\n<p>Django has a great tutorial, but it take longer than this session.\nHowever, if you&#39;re new to Django, it would\nbe worth the time to do it.</p>\n<hr>\n<h2 id="what-is-django-">What is Django?</h2>\n<ul>\n<li>&quot;The web framework for perfectionists with deadlines&quot;</li>\n<li>Full-featured Python server-side web framework.</li>\n<li>Strong documentation &amp; community</li>\n<li>Features:<ul>\n<li>Authentication</li>\n<li>ORM and database migrations</li>\n<li>Template language</li>\n<li>Admin interface</li>\n<li>Internationalization/Localization</li>\n<li>Development server</li>\n<li>Support for spatial data</li>\n<li>Email/Messaging</li>\n<li>and more ...</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="virtualenv">VirtualEnv</h2>\n<p>Django projects are typically run inside of a virtual environment</p>\n<pre><code class="lang-bash">pip install virtualenv\nvirtualenv env\nsource env/bin/activate\npip install django\n</code></pre>\n<hr>\n<h2 id="models-models-py-">Models (<code>models.py</code>)</h2>\n<p>Models are Django&#39;s object representation of your database schema:</p>\n<pre><code class="lang-python">class DDataType(models.Model):\n    datatype = models.TextField(primary_key=True)\n    defaultwidget = models.ForeignKey(db_column=&#39;defaultwidget&#39;, to=&#39;Widget&#39;, null=True)\n    isgeometric = models.BooleanField()\n\n    class Meta:\n        managed = True\n        db_table = &#39;d_data_types&#39;\n</code></pre>\n<p><img src="/images/datatype-table.png" alt="Datatype Table"></p>\n<hr>\n<h2 id="migrations">Migrations</h2>\n<p>As your app is developed, models will change. For example you might:</p>\n<ul>\n<li>Add a field</li>\n<li>Remove a field</li>\n<li>Add a constraint</li>\n<li>Rename a field</li>\n<li>etc</li>\n</ul>\n<p>You can update your database with these changes\nby running migrations:</p>\n<ul>\n<li>create a new migration from your models<pre><code class="lang-bash">python manage.py makemigrations\n</code></pre>\n</li>\n<li>run any pending migrations<pre><code class="lang-bash">python manage.py migrate\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="views-views-py-">Views (<code>views.py</code>)</h2>\n<p>Views define how Django handles requests.  Often, views will retrieve data from a model and use that to render a template (HTML):</p>\n<pre><code class="lang-python">@method_decorator(group_required(&#39;Graph Editor&#39;), name=&#39;dispatch&#39;)\nclass GraphDesignerView(GraphBaseView):\n\n    def get(self, request, graphid):\n        datatypes = models.DDataType.objects.all()\n        context[&#39;datatypes&#39;] = datatypes=datatypes\n        return render(request, &#39;graph-designer.htm&#39;, context)\n</code></pre>\n<p>...or they may simply return the model data (JSON):</p>\n<pre><code class="lang-python">class ResourceData(View):\n\n    def get(self, request):\n        datatypes = models.DDataType.objects.all()\n        return JSONResponse(datatypes)\n</code></pre>\n<hr>\n<h2 id="routing-urls-py-">Routing (<code>urls.py</code>)</h2>\n<pre><code class="lang-python">uuid_regex = settings.UUID_REGEX\nurlpatterns = [\n    url(\n        r&#39;^graph_designer/(?P&lt;graphid&gt;%s)$&#39; % uuid_regex,\n        GraphDesignerView.as_view(),\n        name=&#39;graph_designer&#39;\n    ),\n]\n</code></pre>\n<p>For example, if you server is running at localhost:8080, an example of the above URL would look like this:</p>\n<p><a href="http://localhost:8000/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6">http://localhost:8000/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6</a></p>\n<hr>\n<h2 id="templates">Templates</h2>\n<p>Uses data from a view to render a web page (using the Django template language).</p>\n<p>An example template:</p>\n<pre><code class="lang-html">&lt;ul&gt;\n{% for datatype in datatypes %}\n    &lt;li&gt;{{datatype.datatype}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>The above template might render something like this:</p>\n<pre><code class="lang-html">&lt;ul&gt;\n    &lt;li&gt;file-list&lt;/li&gt;\n    &lt;li&gt;string&lt;/li&gt;\n    &lt;li&gt;number&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<hr>\n<h2 id="django-projects">Django Projects</h2>\n<pre><code>arches/\n    manage.py\n    arches/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n</code></pre><p>BTW, Arches is a Django Project</p>\n<hr>\n<h2 id="settings-settings-py-">Settings (<code>settings.py</code>)</h2>\n<p>Application configuration:</p>\n<pre><code class="lang-python">DEBUG = True\nDATABASES = {\n    &#39;default&#39;: {\n        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\n        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),\n    }\n}\nLANGUAGE_CODE = &#39;en-us&#39;\nTIME_ZONE = &#39;UTC&#39;\n</code></pre>\n<hr>\n<h2 id="admin-and-management-commands">Admin and Management Commands</h2>\n<pre><code class="lang-bash">django-admin startproject mysite\narchesproject create myproject\n</code></pre>\n<pre><code class="lang-bash">python manage.py createsuperuser\npython manage.py startapp mynewapp\npython manage.py runserver\n</code></pre>\n<p>You can easily add custom management commands</p>\n<pre><code class="lang-bash">python manage.py packages -o load_package\npython manage.py es index_database\n</code></pre>\n<hr>\n<h2 id="django-apps">Django Apps</h2>\n<p>A project&#39;s functionality can be divided by subject into <code>Apps</code>\nThis is where our models and views go:</p>\n<pre><code>app/\n    __init__.py\n    admin.py #registers app with admin page\n    apps.py  #app configuration file\n    migrations/  #migration files\n        __init__.py\n    models.py\n    tests.py\n    views.py\n</code></pre><p>The Admin page is a good example of a Django app.</p>\n<hr>\n<h2 id="piecing-it-together">Piecing it together</h2>\n<ol>\n<li>Create a project</li>\n<li>Modify your settings (particularly db settings)</li>\n<li>Create a super user</li>\n<li>Create an app</li>\n<li>Register your app in settings</li>\n<li>Write your models -&gt; migrate</li>\n<li>Write your templates, views, and urls (and tests)</li>\n</ol>\n'},374:function(e,n){e.exports='\x3c!-- sectionTitle: Module 1: The Arches Platform --\x3e\n<h1 id="module-1">Module 1</h1>\n<h2 id="the-arches-platform">The Arches Platform</h2>\n<h2 id="and">and</h2>\n<h2 id="core-technical-concepts">Core Technical Concepts</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Describe core technologies and concepts in Arches</li>\n<li>Review standards for contributing to Arches</li>\n<li>Explain different ways of extending Arches</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<ul>\n<li>Understand the basic architecture of Arches</li>\n<li>Be familiar with Arches concepts and nomenclature</li>\n<li>Understand how developers contribute to Arches</li>\n<li>Be aware of the ways in which you can extend Arches</li>\n<li>Understand how Arches applications and packages are related</li>\n<li>Know where to find more help</li>\n</ul>\n<hr>\n<h2 id="design-goals">Design Goals</h2>\n<ul>\n<li>Open Source</li>\n<li>Multi-language</li>\n<li>Standards based<ul>\n<li>CRM - Conceptual Reference Model (<a href="http://www.cidoc-crm.org/">http://www.cidoc-crm.org/</a>)</li>\n</ul>\n</li>\n<li>Graph Data Structure<ul>\n<li>Supports concept management</li>\n<li>Allows for a dynamic logical data model (graph) with a static physical model (db schema)</li>\n<li>PostgreSQL(relational + JSON) ideal for its spatial capabilities</li>\n</ul>\n</li>\n<li>Interoperable: Data could be used in other systems</li>\n<li>These qualities make Arches highly adaptable to different use cases and geographic contexts</li>\n</ul>\n<hr>\n<h2 id="core-technologies-and-system-architecture">Core Technologies and System Architecture</h2>\n<ul>\n<li>Django: server-side web framework</li>\n<li>PostgreSQL/PostGIS: Data store of record (as opposed to the Elasticsearch index)</li>\n<li>Elasticsearch (requires Java): Indexes business data to support search</li>\n<li>TileStache: serves and caches vector and raster tiles</li>\n<li>Knockout.js: UI framework</li>\n</ul>\n<hr>\n<h2 id="contributing-to-arches">Contributing to Arches</h2>\n<ul>\n<li>Communicating about development issues:<ul>\n<li>Ask questions on the forum: <a href="https://groups.google.com/forum/#!forum/archesproject">https://groups.google.com/forum/#!forum/archesproject</a></li>\n<li>Write a ticket on GitHub: <a href="https://github.com/archesproject/arches">https://github.com/archesproject/arches</a></li>\n</ul>\n</li>\n<li>Writing documentation:<ul>\n<li>Documentation is in a dedicated repo</li>\n<li>Written in restructured text</li>\n<li>Converted to HTML using Sphinx</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="contributing-code">Contributing Code</h2>\n<ul>\n<li>Code style conventions:<ul>\n<li>Python: PEP 8</li>\n<li>JavaScript: ESlint, &#39;recommended&#39;</li>\n</ul>\n</li>\n<li>Submitting pull requests<ul>\n<li>Please create a ticket in the Arches repo first</li>\n<li>Create your own fork with a branch for the ticket</li>\n<li>Submit the pull request from your fork</li>\n</ul>\n</li>\n<li>Developer Code of Conduct<ul>\n<li>Be respectful</li>\n<li>Use clean and inclusive language</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="graphs">Graphs</h2>\n<ul>\n<li>Arches models business data as &quot;graphs&quot;</li>\n<li>There are two kinds of &quot;graphs&quot; in Arches:<ul>\n<li>Resource Models<ul>\n<li>The blueprint of a resource instance</li>\n<li>Conceptually similar to a class in an object-oriented programming language</li>\n<li>Composed of a root node and one or more branches</li>\n</ul>\n</li>\n<li>Branches<ul>\n<li>Building blocks of a resource model</li>\n<li>Generally composed of nodes of a particular theme</li>\n<li>Nodes on a branch that share the same parent comprise a Nodegroup</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="graphs">Graphs</h2>\n<ul>\n<li>Graphs are comprised of:<ul>\n<li>Nodes<ul>\n<li>The smallest unit of a resource model</li>\n<li>Semantic or data collecting</li>\n</ul>\n</li>\n<li>Edges<ul>\n<li>Relationships between nodes.</li>\n<li>In some cases has a relationship with its parent defined</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="resource-instances">Resource Instances</h2>\n<ul>\n<li>Resource Model vs Resource Instance</li>\n<li>Resource models often referred as <code>models</code></li>\n<li>Resource instances often referred to as <code>resources</code> or <code>instances</code></li>\n</ul>\n<hr>\n<h2 id="elasticsearch">Elasticsearch</h2>\n<p>The structure of business data in ElasticSearch is not exactly the same as in\nPostgreSQL.</p>\n<ul>\n<li><a href="https://github.com/mobz/elasticsearch-head">elasticsearch-head</a></li>\n<li><a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/">elasticsearch-head chrome plugin</a></li>\n</ul>\n<hr>\n<h2 id="datatypes">Datatypes</h2>\n<ul>\n<li>Datatypes define how data are managed for a given node</li>\n<li>For example: strings, numbers, dates, etc.</li>\n<li>Datatypes are responsible for all backend operations, including:<ul>\n<li>Validating values prior to save</li>\n<li>Indexing and searching for values in Elasticsearch</li>\n<li>Transforming data on import and export</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="ui-representation">UI Representation</h2>\n<ul>\n<li>Cards - UI representation of a <strong>nodegroup/tile</strong></li>\n<li>Widgets - UI representation of a <strong>node/value</strong> based on datatype</li>\n<li>A datatype can be represented by different widgets, for example:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">datatype</th>\n<th style="text-align:center">widgets</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">boolean</td>\n<td style="text-align:center">radio, switch, select</td>\n</tr>\n<tr>\n<td style="text-align:center">string</td>\n<td style="text-align:center">input, rich text editor</td>\n</tr>\n<tr>\n<td style="text-align:center">domain</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n<tr>\n<td style="text-align:center">concept</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id="functions">Functions</h2>\n<ul>\n<li>Custom data processing operations triggered when Arches retrieves, saves, or deletes data belonging to a specified nodegroup.</li>\n<li>Conceptually, similar to a database trigger.</li>\n<li>Arches only includes one function by default:<ul>\n<li>The display descriptors function</li>\n<li>allows for the definition of names &amp; descriptions for instances of a given resource model</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="code-organization">Code organization</h2>\n<ul>\n<li>If you&#39;ve used Django, Arches will look very familiar</li>\n<li>Django template file paths and names generally match their javascript counterparts:<ul>\n<li><code>arches/app/templates/views/components/widgets/number.htm</code></li>\n<li><code>arches/app/media/js/views/components/widgets/number.js</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="managing-dependencies">Managing dependencies</h2>\n<ul>\n<li>Python pip (requirements.txt and requirements-dev.txt)</li>\n<li><p>Node/Yarn (you can add to these dependencies in you&#39;re projects package.json file)</p>\n</li>\n<li><p>For editing documentation you need  </p>\n<ul>\n<li>sphinx</li>\n<li>sphinx-rtd-theme</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="packages">Packages</h2>\n<ul>\n<li>Organization of files used to implement an Arches application<ul>\n<li>Business data</li>\n<li>Resource models and branches</li>\n<li>Custom cards, datatypes, widgets, report templates</li>\n</ul>\n</li>\n<li>In contrast, a <strong><em>Project</em></strong> is essentially a Django <code>project</code>.</li>\n</ul>\n<hr>\n<h2 id="working-in-class-dependencies">Working in class - dependencies</h2>\n<ul>\n<li>You are expected to have the dependencies outlined <a href="https://arches.readthedocs.io/en/stable/requirements-and-dependencies/">here</a> installed as well as <a href="https://arches.readthedocs.io/en/stable/installation/">Arches</a></li>\n<li>You&#39;ll also need a git client and a text editor; we recommend <a href="https://atom.io/">Atom</a></li>\n<li>If you don&#39;t have these installed already, you may want to follow along with a classmate today and install them before tomorrow&#39;s class</li>\n</ul>\n<hr>\n<h2 id="working-in-class-project">Working in class - project</h2>\n<ul>\n<li>throughout the class, we&#39;ll be doing development in an Arches project stored in a GitHub repository</li>\n<li>to set up your local environment, clone the repository at <a href="https://github.com/archesproject/arches-dev-training-project"><code>archesproject/arches-dev-training-project</code></a> on GitHub:<pre><code class="lang-bash">git clone https://github.com/archesproject/arches-dev-training-project.git\n</code></pre>\n</li>\n<li>...then install packages and build the your starter database like so <strong>(with the virtual environment activated where you installed Arches)</strong>:<pre><code class="lang-bash">yarn install\npython manage.py packages -o setup_db\n</code></pre>\n</li>\n</ul>\n'},375:function(e,n){e.exports='\x3c!-- sectionTitle: Module 2: Introduction to Datatypes --\x3e\n<h1 id="module-2">Module 2</h1>\n<h2 id="introduction-to-datatypes">Introduction to Datatypes</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>review what datatypes are in Arches<ul>\n<li>what can they do?</li>\n<li>where are datatypes registered?</li>\n<li>what are they in code?</li>\n<li>when do I need a new datatype?</li>\n</ul>\n</li>\n<li>look at code for datatypes built into Arches</li>\n</ul>\n<hr>\n<h2 id="what-are-datatypes-">What are datatypes?</h2>\n<ul>\n<li>a way of representing values in Arches resources</li>\n<li>Arches includes sensible defaults:<ul>\n<li>string</li>\n<li>number</li>\n<li>date</li>\n<li>etc...</li>\n</ul>\n</li>\n<li>consist of backend code for managing data</li>\n<li>can optionally include a front end configuration component</li>\n<li>data are actually stored as JSON (can be objects or literals)</li>\n</ul>\n<hr>\n<h2 id="what-can-datatypes-do-">What can datatypes do?</h2>\n<ul>\n<li>validate incoming data before saving values</li>\n<li>transform values for import/export</li>\n<li>index data to ElasticSearch</li>\n<li>query data in ElasticSearch for advanced searching</li>\n<li>handle incoming request objects (to save files, for example)</li>\n<li>execute logic after data are saved</li>\n<li>provides hooks for Arches native geospatial features<ul>\n<li>tileserver layers</li>\n<li>map overlays</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>Arches stores datatypes in PostgreSQL, in a table called <code>d_data_types</code>, for example...</p>\n<h3 id="query">Query</h3>\n<pre><code class="lang-SQL">SELECT * FROM d_data_types WHERE datatype = &#39;boolean&#39;;\n</code></pre>\n<h3 id="results">Results</h3>\n<div class="db-results">\n    <table>\n        <thead>\n            <tr>\n                <th style="text-align:left">datatype</th>\n                <th style="text-align:left">iconclass</th>\n                <th style="text-align:left">modulename</th>\n                <th style="text-align:left">classname</th>\n                <th style="text-align:left">configcomponent</th>\n                <th style="text-align:left">defaultconfig</th>\n                <th style="text-align:left">configname</th>\n                <th style="text-align:left">isgeometric</th>\n                <th style="text-align:left">defaultwidget</th>\n                <th style="text-align:left">issearchable</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td style="text-align:left">boolean</td>\n                <td style="text-align:left">fa fa-toggle-on</td>\n                <td style="text-align:left">datatypes.py</td>\n                <td style="text-align:left">BooleanDataType</td>\n                <td style="text-align:left">views/components/datatypes/boolean</td>\n                <td style="text-align:left">{&quot;trueLabel&quot;:&quot;Yes&quot;,&quot;falseLabel&quot;:&quot;No&quot;}</td>\n                <td style="text-align:left">boolean-datatype-config</td>\n                <td style="text-align:left">false</td>\n                <td style="text-align:left">10000000-0000-0000-0000-000000000006</td>\n                <td style="text-align:left">true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<hr>\n<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>The <code>d_data_types</code> table has the following columns:</p>\n<ul>\n<li><code>datatype</code> [string]: the name of the datatype, also the primary key</li>\n<li><code>iconclass</code> [string]: a class (or classes) to be used to render an icon for this datatype</li>\n<li><code>modulename</code> [string]: the python module that defines this datatype</li>\n<li><code>classname</code> [string]: the class that defines this datatype</li>\n<li><code>configcomponent</code> [string]: an optional path to a KO component for configuration</li>\n<li><code>defaultconfig</code> [JSON]: the default configuration for nodes using this datatype</li>\n<li><code>configname</code> [string]: the name of a KO component for configuration</li>\n<li><code>isgeometric</code> [boolean]: use this datatype on maps</li>\n<li><code>defaultwidget</code> [UUID]: a foreign key to the default widget to use with this datatype</li>\n<li><code>issearchable</code> [boolean]: use this datatype in advanced search</li>\n</ul>\n<hr>\n<h2 id="what-are-datatypes-in-code-">What are datatypes in code?</h2>\n<ul>\n<li>Arches represents datatypes on the backend as a Python class<ul>\n<li>should extend <code>arches.app.datatypes.base.BaseDataType</code></li>\n<li>is responsible for all datatype logic</li>\n<li><code>d_data_types.classname</code> defines this class</li>\n<li>module containing this class (<code>d_data_types.modulename</code>) must be in a path contained in <code>settings.DATATYPE_LOCATIONS</code></li>\n</ul>\n</li>\n<li>datatypes can also (optionally) include a Knockout component, used for:<ul>\n<li>configuring nodes to use a datatype</li>\n<li>searching for values of a given datatype in advanced search</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id="example-booleandatatype-python-class">Example: BooleanDataType Python class</h3>\n<pre><code class="lang-python">class BooleanDataType(BaseDataType):\n\n    def validate(self, value, row_number=None, source=&#39;&#39;):\n        errors = []\n\n        try:\n            type(bool(distutils.util.strtobool(str(value)))) is True\n        except:\n            errors.append({\n                &#39;type&#39;: &#39;ERROR&#39;,\n                &#39;message&#39;: &#39;{0} is not of type boolean. This data was not imported.&#39;.format(value)\n            })\n\n        return errors\n\n    def transform_import_values(self, value, nodeid):\n        return bool(distutils.util.strtobool(str(value)))\n\n    def append_search_filters(self, value, node, query, request):\n        try:\n            if value[&#39;val&#39;] != &#39;&#39;:\n                term = True if value[&#39;val&#39;] == &#39;t&#39; else False\n                query.must(Term(field=&#39;tiles.data.%s&#39; % (str(node.pk)), term=term))\n        except KeyError, e:\n            pass\n</code></pre>\n<hr>\n<h3 id="example-booleandatatype-configuration-js">Example: BooleanDataType configuration JS</h3>\n<pre><code class="lang-javascript">define([&#39;knockout&#39;], function(ko) {\n    var name = &#39;boolean-datatype-config&#39;;\n    ko.components.register(name, {\n        viewModel: function(params) {\n            var self = this;\n            var config = params.config ? params.config : params.node.config;\n\n            this.search = params.search;\n            this.graph = params.graph;\n            this.trueLabel = config.trueLabel;\n            this.falseLabel = config.falseLabel;\n\n            if (this.search) {\n                var filter = params.filterValue();\n                this.searchValue = ko.observable(filter.val || &#39;&#39;);\n                this.filterValue = ko.computed(function() {\n                    return {\n                        val: self.searchValue()\n                    };\n                });\n                params.filterValue(this.filterValue());\n                this.filterValue.subscribe(function(val) {\n                    params.filterValue(val);\n                });\n            }\n        },\n        template: { require: &#39;text!datatype-config-templates/boolean&#39; }\n    });\n    return name;\n});\n</code></pre>\n<hr>\n<h3 id="example-booleandatatype-configuration-html">Example: BooleanDataType configuration HTML</h3>\n<pre><code class="lang-html">{% load i18n %}\n\n&lt;!-- ko if: $data.search --&gt;\n{% block search %}\n&lt;div class=&quot;col-sm-12&quot;&gt;\n    &lt;select class=&quot;resources&quot; data-bind=&quot;value: searchValue, chosen: {\n        width: &#39;100%&#39;,\n        disable_search_threshold: 15\n    }, options: [\n        {id: &#39;t&#39;, name: trueLabel},\n        {id: &#39;f&#39;, name: falseLabel}\n    ], optionsText: &#39;name&#39;, optionsValue: &#39;id&#39;&quot;&gt;&lt;/select&gt;\n&lt;/div&gt;\n{% endblock search %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: $data.graph --&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;True&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: trueLabel&quot;&gt;\n&lt;/div&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;False&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: falseLabel&quot;&gt;\n&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n<hr>\n<h2 id="use-a-custom-datatype-when-">Use a custom datatype when...</h2>\n<ul>\n<li>you need to store data structures not currently supported in Arches</li>\n<li>you need to implement custom logic for:<ul>\n<li>validation</li>\n<li>ElasticSearch indexing/querying</li>\n<li>import/export</li>\n<li>handling requests</li>\n</ul>\n</li>\n</ul>\n'},376:function(e,n){e.exports='\x3c!-- sectionTitle: Module 3: Building a Custom Datatype --\x3e\n<h1 id="module-3">Module 3</h1>\n<h2 id="building-a-custom-datatype">Building a Custom Datatype</h2>\n<hr>\n<h2 id="lab-overview">Lab Overview</h2>\n<ul>\n<li>add a new custom datatype to Arches to track addresses</li>\n<li>customize the logic for the address datatype for:<ul>\n<li>data validation</li>\n<li>indexing terms and instance data for search</li>\n</ul>\n</li>\n<li>test the address custom datatype by importing a resource model and instance data</li>\n</ul>\n<hr>\n<h2 id="adding-the-address-datatype">Adding the address datatype</h2>\n<ul>\n<li>Address data can be modeled as a simple object:<pre><code class="lang-json">{\n  &quot;x&quot;: 37,\n  &quot;y&quot;: -127,\n  &quot;address&quot;: &quot;1234 Fake St., San Francisco, CA 94111&quot;\n}\n</code></pre>\n</li>\n<li>To add the address datatype to Arches, run the following from your project with your virtual environment activated:<pre><code class="lang-bash">python manage.py datatype register -s arches_dev_training/datatypes/address.py\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="the-address-datatype">The address datatype</h2>\n<pre><code class="lang-python">from arches.app.datatypes.base import BaseDataType\n\ndetails = {\n    &#39;datatype&#39;: &#39;address&#39;,\n    &#39;iconclass&#39;: &#39;fa fa-location-arrow&#39;,\n    &#39;modulename&#39;: &#39;datatypes.py&#39;,\n    &#39;classname&#39;: &#39;AddressDataType&#39;,\n    &#39;defaultwidget&#39;: None,\n    &#39;defaultconfig&#39;: None,\n    &#39;configcomponent&#39;: None,\n    &#39;configname&#39;: None,\n    &#39;isgeometric&#39;: False,\n    &#39;issearchable&#39;: False\n}\n\n\nclass AddressDataType(BaseDataType):\n\n    def validate(self, value, source=None):\n        return []\n\n    def append_to_document(self, document, nodevalue, nodeid, tile):\n        return\n\n    def get_search_terms(self, nodevalue, nodeid=None):\n        return []\n\n</code></pre>\n<hr>\n<h2 id="adding-validation-demo-">Adding validation (demo)</h2>\n<hr>\n<h2 id="adding-validation">Adding validation</h2>\n<pre><code class="lang-python">def validate(self, value, source=None):\n    errors = []\n    message = &#39;datatype: address, value: {1} {2} - missing required properties. This data was not imported.&#39;\n    try:\n        value[&#39;address&#39;]\n        value[&#39;x&#39;]\n        value[&#39;y&#39;]\n    except KeyError:\n        errors.append({\n            &#39;type&#39;: &#39;ERROR&#39;,\n            &#39;message&#39;: message.format(value, source)\n        })\n\n    return errors\n</code></pre>\n<hr>\n<h2 id="indexing-data-demo-">Indexing data (demo)</h2>\n<hr>\n<h2 id="indexing-data">Indexing data</h2>\n<pre><code class="lang-python">def append_to_document(self, document, nodevalue, nodeid, tile):\n    document[&#39;strings&#39;].append({\n        &#39;string&#39;: nodevalue[&#39;address&#39;],\n        &#39;nodegroup_id&#39;: tile.nodegroup_id\n    })\n\ndef get_search_terms(self, nodevalue, nodeid=None):\n    return [\n        nodevalue[&#39;address&#39;]\n    ]\n</code></pre>\n<hr>\n<h2 id="importing-a-model-data">Importing a model &amp; data</h2>\n<ul>\n<li>Now, let&#39;s test the new datatype by importing a model and some instance data that implement it <strong>(with your Arches virtual environment activated)</strong>:<pre><code class="lang-bash">python manage.py packages -o import_graphs -s arches_dev_training/graphs/Person.json\npython manage.py packages -o import_business_data -s arches_dev_training/data/Person.json -ow overwrite\n</code></pre>\n</li>\n<li>You can verify that the data loaded by turning on the development server and then going to the <a href="http://localhost:8000/search">search page</a>:<pre><code class="lang-bash">python manage.py runserver\n</code></pre>\n</li>\n</ul>\n'},377:function(e,n){e.exports='\x3c!-- sectionTitle: Module 4: Introduction to Components --\x3e\n<h1 id="module-4">Module 4</h1>\n<h2 id="introduction-to-components-in-arches">Introduction to Components in Arches</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>What are Knockout components</li>\n<li>How are they used in Arches</li>\n<li>How are their files organized in Arches</li>\n<li>How are they registered</li>\n</ul>\n<hr>\n<h2 id="knockout-components">Knockout Components</h2>\n<ul>\n<li>Similar to Angular directives or Vue components</li>\n<li>Reusable blocks of UI</li>\n<li>Comprise a javascript view model corresponding html template</li>\n<li>Configurable</li>\n</ul>\n<hr>\n<h2 id="the-role-of-components">The role of components</h2>\n<ul>\n<li><strong>Widgets:</strong>  the UI for a node</li>\n<li><strong>Card components:</strong>  the UI for a node group or collection of widgets</li>\n<li><strong>Reports:</strong>  the UI for a resource report header and the display of cards</li>\n<li><strong>Functions:</strong>  the UI for function configuration (not covered in this course)</li>\n</ul>\n<p>Lets look at some examples in Arches...</p>\n<hr>\n<h2 id="components-as-extensions-of-arches">Components as extensions of Arches</h2>\n<p>You could override existing components.\nFor example, the map widget&#39;s geocoder is a component.\nIf it does not suit your needs you could simply override the existing one.</p>\n<p>The components we&#39;re covering in this course can <strong><em>extend</em></strong> Arches.\nThey allow you to add to the existing widgets, cards, and reports.</p>\n<hr>\n<h3 id="why-">Why?</h3>\n<ol>\n<li>You need to support a custom datatype</li>\n<li>You want more options in how your data is presented. For example<ul>\n<li>reports - a new kind of header</li>\n<li>widgets - write a map widget with a different library</li>\n<li>card components - arrange your widgets differently or show a summary of their tile values</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id="registering-components">Registering components</h2>\n<p>Knockout loads components from separate files asynchronously using require.js</p>\n<pre><code class="lang-javascript">ko.components.register(&#39;some-component&#39;, {\n    viewModel: { require: &#39;files/some-component&#39; },\n    template: { require: &#39;text!files/some-component.html&#39; }\n});\n</code></pre>\n<p>Where should you place your component files?</p>\n<hr>\n<h2 id="component-file-locations">Component file locations</h2>\n<ul>\n<li><p>Example template files:</p>\n<pre><code>/templates/views/components/card_components/address-card.html\n/templates/views/components/reports/address-report.html\n/templates/views/components/widgets/geocoder.html\n</code></pre></li>\n<li><p>Example javascript files:</p>\n<pre><code>/media/js/views/components/card_components/address-card.js\n/media/js/views/components/reports/address-report.js\n/media/js/views/components/widgets/geocoder.js\n</code></pre></li>\n<li><p>The html and js file base names should match:</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Javscript</th>\n<th style="text-align:center">HTML</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">address-card.js</td>\n<td style="text-align:center">address-card.html</td>\n</tr>\n<tr>\n<td style="text-align:center">address-report.js</td>\n<td style="text-align:center">address-report.html</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id="the-configuration-json-file">The configuration (.json) file</h2>\n<ul>\n<li>In the training project the config files are located here:<ul>\n<li><code>/card_components/address-card.json</code></li>\n<li><code>/reports/address-report.json</code></li>\n<li><code>/widgets/geocoder.json</code></li>\n</ul>\n</li>\n<li>These can go anywhere in your project</li>\n<li>Ultimately, these will typically be saved in a package</li>\n</ul>\n<hr>\n<h2 id="the-configuration-json-file">The configuration (.json) file</h2>\n<p>Contents corresponds to what is loaded in Postgres.</p>\n<pre><code class="lang-javascript">{\n    &quot;name&quot;: &quot;geocoder&quot;,\n    &quot;component&quot;: &quot;views/components/widgets/geocoder&quot;,\n    &quot;defaultconfig&quot;: {\n        &quot;placeholder&quot;: &quot;Find an address...&quot;\n    },\n    &quot;helptext&quot;: null,\n    &quot;datatype&quot;: &quot;address&quot;\n}\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="/images/widget-db-screenshot.png" alt="widget"></p>\n<hr>\n<h2 id="registering-components">Registering components</h2>\n<p>Each component has its own management command class:</p>\n<pre><code>arches/management/commands/widget.py\narches/management/commands/report.py\narches/management/commands/card_component.py\n</code></pre><p>For example:</p>\n<pre><code class="lang-bash">$(env) python manage.py widget register -s myproject/widgets/geocoder.json\n$(env) python manage.py report register -s myproject/reports/address.json\n$(env) python manage.py card_component register -s myproject/card_components/address.json\n</code></pre>\n<hr>\n<h2 id="checking-if-your-component-is-registered">Checking if your component is registered</h2>\n<pre><code class="lang-bash">$(env) python manage.py widget list\n$(env) python manage.py report list\n$(env) python manage.py card_component list\n</code></pre>\n<hr>\n<h2 id="updating-your-component">Updating your component</h2>\n<pre><code class="lang-bash">$(env) python manage.py widget update -s myproject/widgets/geocoder.json\n$(env) python manage.py report update -s myproject/reports/address.json\n$(env) python manage.py card_component update -s myproject/card_components/address.json\n</code></pre>\n<hr>\n<h2 id="unregistering-components">Unregistering components</h2>\n<ul>\n<li>Components can be unregistered from Arches as below:</li>\n<li>(A component&#39;s <code>name</code> is unique in Arches and is used as its identifier)</li>\n</ul>\n<pre><code class="lang-bash">$(env) python manage.py widget unregister -n &#39;geocoder&#39;\n$(env) python manage.py report unregister -n &#39;address-report&#39;\n$(env) python manage.py card_component unregister -n &#39;address-card&#39;\n</code></pre>\n<hr>\n<h2 id="to-get-help-">To get help:</h2>\n<p>You can list the arguments using <code>--help</code>. For example:</p>\n<ul>\n<li><p>To get the names of the commands:  </p>\n<pre><code>$(env) python manage.py --help\n</code></pre></li>\n<li><p>To get the arguments of a command (widget in this case):  </p>\n<pre><code>$(env) python manage.py widget --help\n</code></pre></li>\n</ul>\n'},378:function(e,n){e.exports='\x3c!-- sectionTitle: Module 5: Widget Development --\x3e\n<h1 id="module-5">Module 5</h1>\n<h2 id="widget-development">Widget Development</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Review what widgets are in Arches</li>\n<li>Where are widgets used in Arches</li>\n<li>What are the basic building blocks of a widget</li>\n<li>Lab - create a geocoder widget for the address datatype</li>\n</ul>\n<hr>\n<h2 id="widget-review">Widget review</h2>\n<ul>\n<li>A widget is the UI representation of a node</li>\n<li>They can be assigned to nodes with a datatype specified in the widget record</li>\n<li>A datatype may have more than one possible widget:<ul>\n<li>string : input/rich text</li>\n<li>boolean : radio/switch</li>\n<li>concept : radio/dropdown</li>\n<li>etc...</li>\n</ul>\n</li>\n<li>As components widgets consist of front-end code only<ul>\n<li>view model</li>\n<li>template</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="where-are-widgets-used-in-arches-">Where are widgets used in Arches?</h2>\n<ul>\n<li>In the graph designer&#39;s widget manager (widget configuration)</li>\n<li>In the resource editor (form)</li>\n<li>In reports</li>\n<li>In the card tree</li>\n</ul>\n<p>In the template, each widget has a dedicated block for each of these roles.</p>\n<hr>\n<h2 id="the-base-widget-template">The base widget template</h2>\n<p><code>arches/app/templates/views/components/widgets/base.htm</code></p>\n<pre><code class="lang-html">{% load i18n %}\n&lt;!-- ko if: !configForm  &amp;&amp; state === &#39;form&#39; --&gt;\n{% block form %}\n{% endblock form %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: !configForm  &amp;&amp; state === &#39;report&#39; --&gt;\n{% block report %}\n&lt;dt data-bind=&quot;text: label&quot;&gt;&lt;/dt&gt;\n&lt;dd data-bind=&quot;text: displayValue() || &#39;{% trans &quot;None&quot; %}&#39;&quot;&gt;&lt;/dd&gt;\n{% endblock report %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: !configForm  &amp;&amp; state === &#39;display_value&#39; --&gt;\n{% block display_value %}\n&lt;span data-bind=&quot;text: displayValue() || &#39;{% trans &quot;None&quot; %}&#39;&quot;&gt;&lt;/span&gt;\n{% endblock display_value %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: configForm --&gt;\n{% block config_form %}\n{% endblock config_form %}\n&lt;!-- /ko --&gt;\n</code></pre>\n<hr>\n<h2 id="widgets-inherit-from-a-base-view-model">Widgets inherit from a base view model</h2>\n<p><code>arches/app/media/js/viewmodels/widget.js</code></p>\n<p>This makes some properties immediately available as ko observables</p>\n<ul>\n<li>configurations<ul>\n<li><code>params.configKeys = []</code></li>\n</ul>\n</li>\n<li><code>defaultValue</code></li>\n<li><code>label</code></li>\n<li><code>value</code></li>\n<li>value properties (if your data is a simple object)<ul>\n<li><code>params.valueProperties = []</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="a-basic-widget-view-model">A basic widget view model</h2>\n<pre><code class="lang-javascript">define([&#39;knockout&#39;, &#39;underscore&#39;, &#39;viewmodels/widget&#39;], function (ko, _, WidgetViewModel) {\n    return ko.components.register(&#39;text-widget&#39;, {\n        viewModel: function(params) {\n            params.configKeys = [&#39;placeholder&#39;, &#39;width&#39;, &#39;maxLength&#39;, &#39;defaultValue&#39;];\n            WidgetViewModel.apply(this, [params]);\n        },\n        template: { require: &#39;text!widget-templates/text&#39; }\n    });\n});\n</code></pre>\n<hr>\n<h2 id="the-widget-manager-config_form">The widget manager - config_form</h2>\n<p><img src="/images/widget-manager-config-form.png" alt="widget manager"></p>\n<hr>\n<h2 id="a-basic-widget-config-form">A basic widget config form</h2>\n<h3 id="markup-is-in-the-config_form-block">Markup is in the <code>config_form</code> block</h3>\n<pre><code class="lang-html">{% block config_form %}\n&lt;div class=&quot;control-label&quot;&gt;{% trans &quot;Placeholder&quot; %}&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;  \n    &lt;input type=&quot;&quot; placeholder=&quot;{% trans &quot;Placeholder&quot; %}&quot; id=&quot;&quot; class=&quot;form-control input-md widget-input&quot;  \n    data-bind=&quot;textInput: placeholder&quot;&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;control-label&quot;&gt;{% trans &quot;Max Length&quot; %}&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input type=&quot;&quot; placeholder=&quot;{% trans &quot;Max Length&quot; %}&quot; id=&quot;&quot; class=&quot;form-control input-md widget-input&quot;  \n    data-bind=&quot;textInput: maxLength&quot;&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;control-label&quot;&gt;{% trans &quot;Default Value&quot; %}&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input type=&quot;&quot; placeholder=&quot;{% trans &quot;Default Value&quot; %}&quot; id=&quot;&quot; class=&quot;form-control input-md widget-input&quot;  \n    data-bind=&quot;textInput: defaultValue&quot;&gt;\n&lt;/div&gt;\n{% endblock config_form %}\n</code></pre>\n<hr>\n<h2 id="the-widget-manager-form">The widget manager - form</h2>\n<p><img src="/images/widget-manager-form.png" alt="widget manager"></p>\n<hr>\n<h2 id="a-basic-widget-form">A basic widget form</h2>\n<h3 id="markup-is-in-the-form-block">Markup is in the <code>form</code> block</h3>\n<pre><code class="lang-html">{% block form %}\n&lt;div class=&quot;row widget-wrapper&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label class=&quot;control-label widget-input-label&quot; for=&quot;&quot; data-bind=&quot;text:label&quot;&gt;&lt;/label&gt;\n        &lt;!-- ko if: node --&gt;\n        &lt;i data-bind=&quot;css: {&#39;ion-asterisk widget-label-required&#39;: node.isrequired}&quot;&gt;&lt;/i&gt;\n        &lt;!-- /ko --&gt;\n        &lt;div class=&quot;col-xs-12&quot;&gt;\n            &lt;input type=&quot;text&quot; class=&quot;form-control input-lg widget-input&quot;\n            data-bind=&quot;textInput: value, attr: {  \n                placeholder: placeholder,  \n                maxlength: maxLength,  \n                disabled: disabled},  \n                style: {width: width}&quot;&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock form %}\n</code></pre>\n<hr>\n<h2 id="lab-overview">Lab Overview</h2>\n<p>Build a widget that will get an address from a geocoding service:</p>\n<ul>\n<li>Define our widget configs for a geocoder widget</li>\n<li>Update our widget&#39;s view model</li>\n<li>Update our widget&#39;s template</li>\n<li>Register our widget in Arches</li>\n<li>Update our address datatype so that it uses our widget by default</li>\n</ul>\n<hr>\n<h2 id="getting-caught-up">Getting caught up</h2>\n<pre><code>git checkout module-5\npython manage.py packages -o setup_db\npython manage.py datatype register -s arches_dev_training/datatypes/address.py\npython manage.py packages -o import_graphs -s arches_dev_training/graphs/Person.json\npython manage.py packages -o import_business_data -s arches_dev_training/data/Person.json -ow overwrite\n</code></pre><hr>\n<h2 id="defining-our-widget-properties-in-the-json-file">Defining our widget properties in the .json file</h2>\n<p>arches_dev_training/widgets/geocoder.json</p>\n<pre><code class="lang-javascript">{\n    &quot;defaultconfig&quot;: {\n        &quot;placeholder&quot;: &quot;Find an address...&quot;\n    }\n}\n</code></pre>\n<p>Add the rest of the widget&#39;s properties</p>\n<hr>\n<h2 id="widget-properties-demo">Widget Properties Demo</h2>\n<hr>\n<h2 id="widget-properties">Widget Properties</h2>\n<pre><code class="lang-javascript">{\n    &quot;name&quot;: &quot;geocoder&quot;,\n    &quot;component&quot;: &quot;views/components/widgets/geocoder&quot;,\n    &quot;defaultconfig&quot;: {\n        &quot;placeholder&quot;: &quot;Find an address...&quot;\n    },\n    &quot;helptext&quot;: null,\n    &quot;datatype&quot;: &quot;address&quot;\n}\n</code></pre>\n<hr>\n<h2 id="update-our-view-model">Update our view model</h2>\n<p>arches_dev_training/media/js/views/components/widgets/geocoder.js</p>\n<ol>\n<li><p>The widget&#39;s view model need the following parameter properties assigned:<br><code>params.valueProperties =</code><br><code>params.configKeys =</code></p>\n</li>\n<li><p>We need use the <code>apply</code> method to inherit from the base widget view model</p>\n</li>\n<li><p>Also, the <code>template</code> file path needs to be updated</p>\n</li>\n</ol>\n<hr>\n<h2 id="view-model-demo">View Model Demo</h2>\n<hr>\n<h2 id="view-model">View Model</h2>\n<ol>\n<li><p><code>params.valueProperties = [&#39;address&#39;,&#39;x&#39;,&#39;y&#39;];</code><br><code>params.configKeys = [&#39;placeholder&#39;];</code></p>\n</li>\n<li><p><code>WidgetViewModel.apply(this, [params]);</code></p>\n</li>\n<li><p><code>&#39;text!templates/views/components/widgets/geocoder.htm&#39;</code></p>\n</li>\n</ol>\n<hr>\n<h2 id="template">Template</h2>\n<p>Bind the label observable to the label element:</p>\n<pre><code class="lang-html">{% block form %}\n&lt;div class=&quot;row widget-wrapper&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label class=&quot;control-label widget-input-label&quot; for=&quot;&quot;&gt;&lt;/label&gt;\n        &lt;div class=&quot;col-xs-12&quot;&gt;\n            &lt;input style=&quot;padding-bottom: 5px;&quot; data-bind=&quot;select2Query: {select2Config: select2Config}&quot;&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock form %}\n</code></pre>\n<p>Bind the placeholder observable to the placeholder config input:</p>\n<pre><code class="lang-html">{% block config_form %}\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Placeholder&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input type=&quot;text&quot; placeholder=&quot;{% trans &quot;Placeholder&quot; %}&quot; id=&quot;&quot;   \n    class=&quot;form-control input-md widget-input&quot;&gt;\n&lt;/div&gt;\n{% endblock config_form %}\n</code></pre>\n<hr>\n<h2 id="template-demo">Template Demo</h2>\n<hr>\n<h2 id="template">Template</h2>\n<pre><code class="lang-html">{% block form %}\n&lt;div class=&quot;row widget-wrapper&quot;&gt;\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label class=&quot;control-label widget-input-label&quot; for=&quot;&quot; data-bind=&quot;text:label&quot;&gt;&lt;/label&gt;\n        &lt;div class=&quot;col-xs-12&quot;&gt;\n            &lt;input style=&quot;padding-bottom: 5px;&quot; data-bind=&quot;select2Query: {select2Config: select2Config}&quot;&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock form %}\n\n{% block config_form %}\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Placeholder&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input type=&quot;text&quot; placeholder=&quot;{% trans &quot;Placeholder&quot; %}&quot; id=&quot;&quot;  \n    class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: placeholder&quot;&gt;\n&lt;/div&gt;\n{% endblock config_form %}\n</code></pre>\n<hr>\n<h2 id="registering-the-widget">Registering the Widget</h2>\n<pre><code class="lang-bash">$(env) python manage.py widget register -s arches_dev_training/widgets/geocoder.json\n</code></pre>\n<hr>\n<h3 id="making-the-geocoder-the-default-widget-for-the-address-datatype">Making the geocoder the default widget for the address datatype</h3>\n<pre><code class="lang-python">from arches.app.models import models\n\ngeocoder = models.Widget.objects.get(name=&#39;geocoder&#39;)\n\ndetails = {\n    &#39;datatype&#39;: &#39;address&#39;,\n    &#39;iconclass&#39;: &#39;fa fa-location-arrow&#39;,\n    &#39;modulename&#39;: &#39;datatypes.py&#39;,\n    &#39;classname&#39;: &#39;AddressDataType&#39;,\n    &#39;defaultwidget&#39;: geocoder,\n    &#39;defaultconfig&#39;: None,\n    &#39;configcomponent&#39;: None,\n    &#39;configname&#39;: None,\n    &#39;isgeometric&#39;: False,\n    &#39;issearchable&#39;: False\n}\n</code></pre>\n<hr>\n<h2 id="updating-our-datatype">Updating our datatype</h2>\n<pre><code class="lang-bash">$(env) python manage.py datatype update -s arches_dev_training/datatypes/address.py\n</code></pre>\n'},379:function(e,n){e.exports='\x3c!-- sectionTitle: Module 6: Card Component Development --\x3e\n<h1 id="module-6">Module 6</h1>\n<h2 id="card-component-development">Card Component Development</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Review what card components are in Arches</li>\n<li>What are the basic building blocks of a card component</li>\n<li>Lab - create an address card component</li>\n</ul>\n<hr>\n<h2 id="lab-overview">Lab Overview</h2>\n<p>Build a card component with a map to display addresses in that card</p>\n<ul>\n<li>Catch everyone up to the end of the last lab</li>\n<li>Update our address card component&#39;s view model</li>\n<li>Update our address card component&#39;s template</li>\n<li>Register our card component in Arches</li>\n<li>Assign the address card component to the Address card of the Person model</li>\n</ul>\n<hr>\n<h2 id="card-components-review">Card components Review</h2>\n<ul>\n<li>Cards are the UI in Arches that is used to represent a &quot;tile&quot;/&quot;node group&quot;</li>\n<li>Cards are rendered using &quot;card components&quot; (KO components)</li>\n<li>Card components are meant to manage a tile, but they can also manage children of that tile</li>\n<li>The default template is also the base card component template</li>\n</ul>\n<hr>\n<h2 id="when-to-use-card-components">When to use card components</h2>\n<p>Card components can be used to:</p>\n<ul>\n<li>customize the display of widgets</li>\n<li>add some UI to a card (eg: a summary header)</li>\n<li>change the way data are managed<ul>\n<li>manage a node in the tile</li>\n<li>manage some child tile(s)</li>\n</ul>\n</li>\n<li>modify the presentation of cards and tiles in tree UIs<ul>\n<li>graph designer</li>\n<li>resource editor</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="card-component-templates">Card component templates</h2>\n<p>As with widgets, the default card component template has a number of blocks we can override:</p>\n<ul>\n<li><code>editor_tree</code>: the card and its tiles in the editor tree</li>\n<li><code>designer_tree</code>: the card and its widgets in the designer tree</li>\n<li><code>permissions_tree</code>: the card and its widgets in the designer tree</li>\n<li><code>form</code>: the entire card in the resource editor</li>\n<li><code>form_header</code>: the card header in the resource editor</li>\n<li><code>form_buttons</code>: the buttons to manage save/cancel in the resource editor</li>\n<li><code>report</code>: the card in the resource report</li>\n<li><code>config</code>: the configuration form for the card component in the designer</li>\n</ul>\n<hr>\n<h2 id="card-component-view-model">Card component view model</h2>\n<p><code>arches/app/media/js/viewmodels/card-component.js</code></p>\n<p>As with widgets, this view model provides some observables by default</p>\n<ul>\n<li>configurations<ul>\n<li><code>params.configKeys = []</code></li>\n</ul>\n</li>\n<li><code>card</code> (<code>arches/app/media/js/viewmodels/card.js</code>)</li>\n<li><code>tile</code> (<code>arches/app/media/js/viewmodels/tile.js</code>)</li>\n<li><code>preview</code></li>\n<li><code>form</code></li>\n</ul>\n<hr>\n<h2 id="adding-an-address-card-component">Adding an address card component</h2>\n<p>The address card component JSON (<code>card_components/address-card.json</code>):</p>\n<pre><code class="lang-json">{\n    &quot;name&quot;: &quot;Address Card&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;component&quot;: &quot;views/components/card_components/address-card&quot;,\n    &quot;componentname&quot;: &quot;address-card&quot;,\n    &quot;defaultconfig&quot;: {\n        &quot;icon&quot;: &quot;star-15&quot;\n    }\n}\n</code></pre>\n<hr>\n<h2 id="add-a-map-to-the-card-header-demo-">Add a map to the card header (demo)</h2>\n<hr>\n<h2 id="add-a-map-to-the-card-header-view-model">Add a map to the card header - View model</h2>\n<pre><code class="lang-js">if (self.tile) {\n    _.each(koMapping.toJS(self.tile.data), function(value) {\n        if (value &amp;&amp; value.address &amp;&amp; value.x &amp;&amp; value.y) {\n            geoJSON.features.push({\n                &#39;properties&#39;: {\n                    &#39;address&#39;: value.address\n                },\n                &#39;geometry&#39;: {\n                    &#39;type&#39;: &#39;Point&#39;,\n                    &#39;coordinates&#39;: [value.x, value.y]\n                }\n            });\n        }\n    });\n}\n</code></pre>\n<hr>\n<h2 id="add-a-map-to-the-card-header-template">Add a map to the card header - Template</h2>\n<pre><code class="lang-HTML">{% block form_header %}\n    {{ block.super }}\n    &lt;div class=&quot;address-card-map&quot; data-bind=&quot;mapboxgl: {\n        mapOptions: {\n            style: &#39;mapbox://styles/mapbox/streets-v9&#39;\n        },\n        afterRender: setupMap\n    }&quot;&gt;&lt;/div&gt;\n{% endblock form_header %}\n</code></pre>\n<hr>\n<h2 id="add-a-form-for-map-icon-demo-">Add a form for map icon (demo)</h2>\n<hr>\n<h2 id="add-a-form-for-map-icon-template">Add a form for map icon - Template</h2>\n<pre><code class="lang-HTML">{% block config %}\n&lt;div class=&quot;node-config-item&quot;&gt;\n    &lt;div class=&quot;control-label&quot;&gt;\n        {% trans &quot;Icon&quot; %}\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input style=&quot;padding-bottom: 5px;&quot; data-bind=&quot;select2Query: {\n            select2Config: {\n                value: icon,\n                data: {\n                    results: [{\n                        text: &#39;Star&#39;,\n                        id: &#39;star-15&#39;\n                    }, {\n                        text: &#39;Circle&#39;,\n                        id: &#39;circle-15&#39;\n                    }, {\n                        text: &#39;Triangle&#39;,\n                        id: &#39;triangle-15&#39;\n                    }]\n                }\n            }\n        }&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock config %}\n</code></pre>\n<hr>\n<h2 id="registering-the-card-component">Registering the card component</h2>\n<ul>\n<li>Register the card component using the following command:<pre><code class="lang-bash">$(env) python manage.py card_component register -s arches_dev_training/card_components/address-card.json\n</code></pre>\n</li>\n<li>Now you can assign the card component to the Address card of the Person model in the designer UI</li>\n</ul>\n'},380:function(e,n){e.exports='\x3c!-- sectionTitle: Module 7: Report Template Development --\x3e\n<h1 id="module-7">Module 7</h1>\n<h2 id="developing-report-templates">Developing Report Templates</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Review what reports are in Arches</li>\n<li>What are the basic building blocks of a report</li>\n<li>Lab - create an address report component</li>\n</ul>\n<hr>\n<h2 id="lab-overview">Lab Overview</h2>\n<p>We need a report to render a map with a resource&#39;s addresses</p>\n<ul>\n<li>Catch everyone up to the end of the last lab</li>\n<li>Update our report&#39;s template</li>\n<li>Update our report&#39;s view model to show addresses on a map</li>\n<li>Register our report in Arches</li>\n</ul>\n<hr>\n<h2 id="report-review">Report Review</h2>\n<ul>\n<li>Reports display data in the report page as well when the root node<br>of a resource instance is selected</li>\n<li>Arches ships with three templates:<ul>\n<li>no header (default)</li>\n<li>image header</li>\n<li>map header</li>\n</ul>\n</li>\n<li>The default template is also the base report template</li>\n<li>The sections of the report that you are likely to override are the<br>header and the header configuration form.</li>\n<li>The body of the report is largely driven by the card component</li>\n</ul>\n<hr>\n<h2 id="report-properties">Report properties</h2>\n<p><code>/reports/address-report.json</code></p>\n<pre><code class="lang-json">{\n    &quot;name&quot;: &quot;Address Report&quot;,\n    &quot;description&quot;: &quot;&quot;,\n    &quot;component&quot;: &quot;views/components/reports/address-report&quot;,\n    &quot;componentname&quot;: &quot;address-report&quot;,\n    &quot;defaultconfig&quot;: {\n        &quot;icon&quot;: &quot;star-15&quot;\n    }\n}\n</code></pre>\n<hr>\n<h2 id="base-report-template-abridged-">Base Report Template (abridged)</h2>\n<pre><code class="lang-diffko">&lt;!--ko if: !configForm --&gt;\n{% block report %}\n    &lt;!-- REMOVED TITLE INFO --&gt;\n!   {% block header %} {% endblock header %}\n!   {% block body %}\n    &lt;!-- REMOVED PROVISIONAL STATUS MARKUP --&gt;\n    &lt;!-- ko foreach: { data: report.cards, as: &#39;card&#39; } --&gt;\n        &lt;!-- ko component: {\n                name: card.model.cardComponentLookup[card.model.component_id()].componentname,\n                params: {\n                    state: &#39;report&#39;,\n                    preview: $parent.report.preview,\n                    card: card\n                }\n            } --&gt; &lt;!-- /ko --&gt;\n     &lt;!-- /ko --&gt;\n!    {% endblock body %}\n    &lt;!-- REMOVED RELATED RESOURCES MARKUP --&gt;\n{% endblock report %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: configForm &amp;&amp; (configType === &#39;header&#39;) --&gt;\n! {% block header_form %} {% endblock header_form %}\n&lt;!-- /ko --&gt;\n</code></pre>\n<hr>\n<h2 id="update-our-template-header">Update our template header</h2>\n<p><code>/templates/views/components/reports/address-report.htm</code></p>\n<p>In the mapboxgl binding handler:</p>\n<ol>\n<li>We need to add a style definition</li>\n<li>We need to initialize our map</li>\n</ol>\n<pre><code class="lang-html">{% extends &quot;views/report-templates/default.htm&quot; %}\n{% load i18n %}\n\n{% block header %}\n&lt;div class=&quot;address-report-map&quot; data-bind=&quot;mapboxgl: {\n    mapOptions: {\n        style: &#39;&#39;\n    },\n    afterRender: function() {console.log(&#39;init map&#39;)}\n}&quot;&gt;&lt;/div&gt;\n{% endblock header %}\n</code></pre>\n<hr>\n<h2 id="update-our-template-header">Update our template header</h2>\n<pre><code class="lang-diffko">{% extends &quot;views/report-templates/default.htm&quot; %}\n{% load i18n %}\n\n{% block header %}\n&lt;div class=&quot;address-report-map&quot; data-bind=&quot;mapboxgl: {\n    mapOptions: {\n-        style: &#39;&#39;\n+        style: &#39;mapbox://styles/mapbox/streets-v9&#39;\n    },\n-    afterRender: function() {console.log(&#39;init map&#39;)}\n+    afterRender: setupMap\n}&quot;&gt;&lt;/div&gt;\n{% endblock header %}\n</code></pre>\n<hr>\n<h3 id="template-header-config-form">Template Header Config Form</h3>\n<ul>\n<li><code>/templates/views/components/reports/address-report.htm</code><ol>\n<li>Add the icon parameter to your templates select2Query binding handler</li>\n<li>Add more icon options to the select2 config</li>\n</ol>\n</li>\n</ul>\n<pre><code class="lang-html">{% block header_form %}\n&lt;div class=&quot;node-config-item&quot;&gt;\n    &lt;div class=&quot;control-label&quot;&gt;\n        {% trans &quot;Icon&quot; %}\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input style=&quot;padding-bottom: 5px;&quot; data-bind=&quot;select2Query: {\n            select2Config: {\n                value: &#39;&#39;,\n                data: {\n                    results: [{\n                        text: &#39;Star&#39;,\n                        id: &#39;star-15&#39;\n                    }]\n                }\n            }\n        }&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock header_form %}\n</code></pre>\n<hr>\n<h2 id="template-header-config-form-demo">Template Header Config Form Demo</h2>\n<hr>\n<h2 id="template-header-config-form">Template Header Config Form</h2>\n<pre><code class="lang-diffko">\n{% block header_form %}\n&lt;div class=&quot;node-config-item&quot;&gt;\n    &lt;div class=&quot;control-label&quot;&gt;\n        {% trans &quot;Icon&quot; %}\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input style=&quot;padding-bottom: 5px;&quot; data-bind=&quot;select2Query: {\n            select2Config: {\n-               value: &#39;&#39;,\n+               value: icon,\n                data: {\n                    results: [{\n                        text: &#39;Star&#39;,\n                        id: &#39;star-15&#39;\n+                   }, {\n+                       text: &#39;Circle&#39;,\n+                       id: &#39;circle-15&#39;\n+                   }, {\n+                       text: &#39;Triangle&#39;,\n+                       id: &#39;triangle-15&#39;\n                    }]\n                }\n            }\n        }&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endblock header_form %}\n</code></pre>\n<hr>\n<h2 id="update-the-report-view-model">Update the Report View Model</h2>\n<p><code>arches_dev_training/media/js/views/components/reports/address-report.js</code></p>\n<p>In its current state the map does not update when address are added or the icon is changed.<br>We need to provide handlers to support dynamically updating these features.</p>\n<hr>\n<h2 id="report-view-model-demo">Report View Model Demo</h2>\n<hr>\n<h2 id="report-view-model">Report View Model</h2>\n<p>At the bottom of <code>this.setupMap</code>:</p>\n<pre><code class="lang-javascript">self.geoJSON.subscribe(function(geoJSON) {\n    map.getSource(&#39;address-points&#39;).setData(geoJSON);\n    zoomToGeoJSON(geoJSON);\n});\n\nself.icon.subscribe(function(icon) {\n    map.setLayoutProperty(&#39;address-points&#39;, &#39;icon-image&#39;, icon);\n});\n</code></pre>\n<hr>\n<h2 id="register-our-report">Register our Report</h2>\n<ul>\n<li>To register your report template with Arches, run the following:</li>\n</ul>\n<pre><code class="lang-bash">$(env) python manage.py report register -s arches_dev_training/reports/address-report.json\n</code></pre>\n<ul>\n<li>Now we can assign our report to the Person resource model</li>\n</ul>\n'},381:function(e,n){e.exports='\x3c!-- sectionTitle: Module 8: Projects and Packages --\x3e\n<h1 id="module-8">Module 8</h1>\n<h2 id="projects-and-packages">Projects and Packages</h2>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<ul>\n<li>To understand the distinction between a project and a package</li>\n<li>To be familiar with the directory structure of a project and a package</li>\n<li>To understand how to create and maintain your own project and/or package</li>\n<li>To understand how Arches applications and packages are related</li>\n<li>To know how to host and contribute to a project or package</li>\n</ul>\n<hr>\n<h2 id="projects">Projects</h2>\n<ul>\n<li>Projects facilitate all of the customizations that you will need to make one installation of Arches different from the next</li>\n<li>You can update html to modify web page branding, and add functions, datatypes, and widgets to introduce new functionality</li>\n<li>A project sits outside of your virtual environment, and can thus be transferred to any other system where Arches is installed</li>\n<li>The templates directory holds HTML templates that you can modify to customize the branding and general appearance of your project.</li>\n</ul>\n<hr>\n<h2 id="project-settings">Project Settings</h2>\n<ul>\n<li>Many project-specific settings are defined in <code>settings.py</code></li>\n<li>You should use <code>settings_local.py</code> to store variables that you may want to keep out of the public eye (db passwords, API keys, etc.).</li>\n<li>Contains your site specific Django settings</li>\n<li>Settings from Arches are inherited and can be overridden by projects and packages:</li>\n</ul>\n<pre><code>Project Settings\n├── Package Settings\n     ├── Core Arches Settings\n</code></pre><hr>\n<h2 id="creating-a-project">Creating a Project</h2>\n<pre><code class="lang-bash">arches-project create mynewproject\n</code></pre>\n<hr>\n<h2 id="project-directory-structure">Project Directory Structure</h2>\n<pre><code>Example Project\n  ├── datatypes\n  ├── functions\n  ├── logs\n  ├── media\n  │   ├── img\n  │   │   └── landing\n  │   ├── js\n  │   │   ├── reports\n  │   │   └── views\n  │   │       └── components\n  │   └── packages\n  ├── node_modules\n  ├── system_settings\n  ├── templates\n  │   └── views\n  │       └── components\n  │           ├── functions\n  │           └── widgets\n  ├── uploadedfiles\n  └── widgets\n</code></pre><hr>\n<h2 id="packages">Packages</h2>\n<ul>\n<li>A package contains all the data you&#39;d like loaded into your Arches implementation<ul>\n<li>business data</li>\n<li>concepts/reference data</li>\n<li>resource models/branches</li>\n<li>datatypes/functions/widgets</li>\n<li>map layers</li>\n</ul>\n</li>\n<li>Each of these components can be loaded separately</li>\n<li>The whole package can be loaded from local file system or directly from github</li>\n<li>Also contains package specific settings (e.g. load order of business data, date format of business data)</li>\n<li>A local package may be updated if you make changes in your deployment of Arches (eg changes to branches and/or resource models)</li>\n</ul>\n<hr>\n<h2 id="creating-a-package">Creating a Package</h2>\n<pre><code class="lang-bash">python manage.py packages -o create_package -d /Full/path/to/mypackage\n</code></pre>\n<hr>\n<h2 id="package-directory-structure">Package Directory Structure</h2>\n<pre><code>Example Package\n  ├── business_data\n  │   ├── files\n  │   └── relations\n  ├── extensions\n  │   ├── datatypes\n  │   ├── functions\n  │   └── widgets\n  ├── graphs\n  │   ├── branches\n  │   └── resource_models\n  ├── map_layers\n  │   ├── mapbox_spec_json\n  │   │   ├── basemaps\n  │   │   └── overlays\n  │   └── tile_server\n  │       ├── basemaps\n  │       └── overlays\n  ├── preliminary_sql\n  ├── reference_data\n  │   ├── collections\n  │   └── concepts\n  ├── staging_data\n  └── system_settings\n</code></pre><hr>\n<h2 id="package-config-vs-package-settings">Package Config vs Package Settings</h2>\n<ul>\n<li>Package Settings<ul>\n<li>The django settings relevant to your package not managed in system settings</li>\n<li>used to apply default settings for your package to projects that use it</li>\n<li>This file is copied into your project when the package is loaded.</li>\n</ul>\n</li>\n<li>Package Config<ul>\n<li>This file allows you to configure other parts of the data loading process.</li>\n<li>For example, the order in which the business data files are loaded</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="package-command-examples">Package command examples</h2>\n<ul>\n<li>update a local package:<pre><code class="lang-bash">python manage.py packages -o update_package -d /Full/path/to/mypackage\n</code></pre>\n</li>\n<li>load a package from GitHub:<pre><code class="lang-bash">python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip\n</code></pre>\n</li>\n<li>override your database when loading a package by adding <code>-db true</code> (careful!):<pre><code class="lang-bash">python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip -db true\n</code></pre>\n</li>\n</ul>\n'},382:function(e,n){e.exports='\x3c!-- sectionTitle: Module 9: Arches Geospatial --\x3e\n<h1 id="module-9">Module 9</h1>\n<h2 id="introduction-to-maps-in-arches">Introduction to Maps in Arches</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Learn the basics about how Arches creates dynamic maps with Mapbox GL JS</li>\n<li>Learn the basics about how Arches serves tiles via TileStache</li>\n<li>Learn about how to add new overlays and basemaps in archesproject<ul>\n<li>from external services using mapbox style json</li>\n<li>from local PostGIS data using TileStache</li>\n</ul>\n</li>\n<li>Learn how to add interactivity to custom layers</li>\n</ul>\n<hr>\n<h2 id="mapbox-gl-js">Mapbox Gl JS</h2>\n<ul>\n<li>Arches uses the powerful front end library called <a href="https://www.mapbox.com/mapbox-gl-js/api/">Mapbox GL JS</a> to create dynamic web maps</li>\n<li>Mapbox GL JS creates beautiful maps with high performance by using<ul>\n<li>Vector Tiles</li>\n<li>Web GL</li>\n</ul>\n</li>\n<li>Built to work with services provided by Mapbox, but not required</li>\n<li>Great examples are available <a href="https://www.mapbox.com/mapbox-gl-js/examples">here</a></li>\n</ul>\n<hr>\n<h2 id="mapbox-style-spec">Mapbox Style Spec</h2>\n<ul>\n<li>Mapbox GL JS uses a JSON spec called the <a href="https://www.mapbox.com/mapbox-gl-js/style-spec">Mapbox Style Spec</a> for defining layer styles</li>\n<li>web based tools are available for working with this spec<ul>\n<li><a href="https://www.mapbox.com/studio/">Mapbox Studio</a></li>\n<li><a href="https://maputnik.github.io/">Maputnik</a></li>\n</ul>\n</li>\n<li>Esri ArcGIS Online and Portal also support this spec (check your license)</li>\n</ul>\n<hr>\n<h2 id="map-sources-and-layers">Map sources and layers</h2>\n<ul>\n<li>In accordance with the <a href="https://www.mapbox.com/mapbox-gl-js/style-spec">Mapbox Style Spec</a>, Arches tracks map sources and layers</li>\n<li>these are stored in PostgreSQL in the tables <code>map_sources</code> and <code>map_layers</code></li>\n<li><code>map_layers</code> are a group of layers as per the style spec that are displayed together (either as a basemap or overlay)</li>\n<li><code>map_layers</code> may reference multiple sources</li>\n<li><code>map_sources</code> and <code>map_layers</code> can be managed via the admin interface or CLI</li>\n<li>Layers and sources can be added from a Mapbox style JSON file using the following command:<pre><code class="lang-bash">python manage.py packages -o add_mapbox_layer -j /path/to/mapbox_style.json -n &quot;New MapBox Layer&quot;\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="custom-map-markers">Custom map markers</h2>\n<ul>\n<li>Custom map marker images can be added from the admin interface</li>\n<li>Map markers consist of a name (unique, no spaces), and a URL</li>\n<li>for example, if you had a custom marker image called <code>&quot;custom-marker&quot;</code>, your layer JSON might look like this:<pre><code class="lang-json">{\n  &quot;id&quot;: &quot;markers&quot;,\n  &quot;type&quot;: &quot;symbol&quot;,\n  &quot;source&quot;: &quot;markers&quot;,\n  &quot;layout&quot;: {\n    &quot;icon-image&quot;: &quot;custom-marker&quot;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="adding-basemaps-from-external-services">Adding basemaps from external services</h2>\n<ul>\n<li>add the basemap from Mapbox by running the following: <pre><code class="lang-bash">python manage.py packages -o add_mapbox_layer \\\n-j arches_dev_training/map_layers/mapbox_spec_json/basemaps/decimal.json \\\n-n &quot;Decimal&quot; -b\n</code></pre>\n</li>\n<li>add the basemap from Ordinance Survey by running the following: <pre><code class="lang-bash">python manage.py packages -o add_mapbox_layer \\\n-j arches_dev_training/map_layers/mapbox_spec_json/basemaps/os-zoomstack-outdoor.json \\\n-n &quot;OS Zoomstack Outdoor&quot; -b\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="adding-basemaps-from-external-services-demo-">Adding basemaps from external services (demo)</h2>\n<hr>\n<h2 id="map-tiles">Map tiles</h2>\n<ul>\n<li><strong>Not to be confused with Arches <code>tiles</code></strong></li>\n<li>On the web, map data is usually served up in tiles</li>\n<li>Tiles are squares of a map prepared for a certain resolution meant to fit together</li>\n<li>Tiles are nice because they allow a client to load just the map they need</li>\n<li>Traditionally, map tiles on the web were images (raster)</li>\n</ul>\n<hr>\n<h2 id="vector-tiles">Vector Tiles</h2>\n<ul>\n<li>Vector tiles are map tiles that contain vector data</li>\n<li><a href="https://www.mapbox.com/vector-tiles/specification/">Mapbox created a spec</a> (now widely adopted, including by Esri) to provide highly compressed vector tiles</li>\n<li>Mapbox Gl JS was built to work with Vector tiles (though it can also display raster tiles)</li>\n<li>Vector tiles are great for web maps because they:<ul>\n<li>are highly compressed</li>\n<li>can be styled on the client</li>\n<li>allow for interactivity</li>\n<li>are tiles! (lightweight, cacheable, well-defined)</li>\n</ul>\n</li>\n<li>You can find a list of <a href="https://github.com/mapbox/awesome-vector-tiles">great tools for working with vector tiles here</a></li>\n</ul>\n<hr>\n<h2 id="tilestache">TileStache</h2>\n<ul>\n<li>Arches integrates the python based tileserver <a href="http://tilestache.org/">TileStache</a></li>\n<li>it can be used to serve up data as raster tiles from a variety of sources</li>\n<li>it can also serve vector tiles up out of PostgreSQL</li>\n<li>TileStache provides basic tileserver features like caching, proxying, and metatiles</li>\n<li>It can be a good solution when convenient, but is not perfect for all deployments</li>\n<li>Arches provides some default layers for resources with geometric nodes using TileStache</li>\n</ul>\n<hr>\n<h2 id="tileserver-layers">Tileserver layers</h2>\n<ul>\n<li>Arches represents TileStache layers in PostgreSQL as the <code>tileserver_layers</code> table</li>\n<li>These layers are defined based on <a href="http://tilestache.org/doc/#layers">TileStache layer configurations</a></li>\n<li><code>tileserver_layers</code> records can be managed via the admin interface or CLI</li>\n<li>tileserver layers (and related map sources and layers) can be created from a JSON file using the following command:<pre><code class="lang-bash">python manage.py packages -o add_tileserver_layer \\\n-t /path/to/tileserver_config.json -n &quot;New Tileserver Layer&quot;\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="adding-interactivity">Adding interactivity</h2>\n<ul>\n<li>Arches provides a number of ways to add interactivity to vectors added to the map</li>\n<li>Vectors representing resource instances can be assigned a property called &quot;<code>resourceinstanceid</code>&quot; to give them the default resource instance popup</li>\n<li>There are also ways to make vectors available for <a href="https://arches.readthedocs.io/en/stable/creating-new-map-layers/#making-selectable-vector-layers">selection as drawings</a> on the map and <a href="https://arches.readthedocs.io/en/stable/creating-new-map-layers/#customizing-map-popup-content">add custom popups</a></li>\n</ul>\n<hr>\n<h2 id="adding-addresses-from-postgis-using-tilestache">Adding addresses from PostGIS using TileStache</h2>\n<ul>\n<li>First we need to create a view of addreses by running the SQL contained in <code>arches_dev_training/sql/addresses.sql</code></li>\n<li>Now, we can add our new address data as a layer by running:<pre><code class="lang-bash">python manage.py packages -o add_tileserver_layer \\\n-t arches_dev_training/map_layers/tile_server/overlays/addresses.json -n &quot;Addresses&quot;\n</code></pre>\n</li>\n</ul>\n<hr>\n<pre><code class="lang-sql">create or replace view addresses as\n    select t.resourceinstanceid,\n        t.tiledata::json -&gt; n.nodeid::text -&gt; &#39;address&#39; as address,\n        c.config::json -&gt; &#39;icon&#39; as icon,\n        st_transform(\n            st_setsrid(\n                st_point(\n                    (t.tiledata::json -&gt; n.nodeid::text -&gt; &#39;x&#39;)::text::float,\n                    (t.tiledata::json -&gt; n.nodeid::text -&gt; &#39;y&#39;)::text::float\n                ),\n                4326\n            ),\n            900913\n        )::geometry(geometry,900913) as geom,\n        row_number () over () as gid\n    from tiles t\n        left join nodes n on t.nodegroupid = n.nodegroupid\n        left join cards c on t.nodegroupid = c.nodegroupid\n    where (\n        select count(*) as count\n        from jsonb_object_keys(t.tiledata) jsonb_object_keys(jsonb_object_keys)\n        where (\n            jsonb_object_keys.jsonb_object_keys in (\n                select n_1.nodeid::text as nodeid\n                from nodes n_1\n                where n_1.datatype = &#39;address&#39;::text\n            )\n        )\n    ) &gt; 0 and n.datatype = &#39;address&#39;::text;\n</code></pre>\n<hr>\n<pre><code class="lang-json">{\n    &quot;type&quot;: &quot;vector&quot;,\n    &quot;layers&quot;: [{\n        &quot;id&quot;: &quot;addresses&quot;,\n        &quot;source&quot;: &quot;addresses&quot;,\n        &quot;type&quot;: &quot;symbol&quot;,\n        &quot;layout&quot;: {\n            &quot;icon-image&quot;: &quot;{icon}&quot;,\n            &quot;text-field&quot;: &quot;{address}&quot;,\n            &quot;text-offset&quot;: [0, 0.6],\n            &quot;text-anchor&quot;: &quot;top&quot;\n        }\n    }],\n    &quot;config&quot;: {\n        &quot;provider&quot;: {\n            &quot;class&quot;: &quot;TileStache.Goodies.VecTiles:Provider&quot;,\n            &quot;kwargs&quot;: {\n                &quot;dbinfo&quot;: {\n                    &quot;host&quot;: &quot;localhost&quot;,\n                    &quot;user&quot;: &quot;postgres&quot;,\n                    &quot;password&quot;: &quot;postgis&quot;,\n                    &quot;database&quot;: &quot;arches&quot;,\n                    &quot;port&quot;: &quot;5432&quot;\n                },\n                &quot;simplify&quot;: 0.5,\n                &quot;queries&quot;: [&quot;select * from addresses&quot;]\n            }\n        },\n        &quot;allowed origin&quot;: &quot;*&quot;,\n        &quot;write cache&quot;: false\n    }\n}\n</code></pre>\n<hr>\n<h2 id="a-word-of-warning-">A word of warning....</h2>\n<p>Tuning your map layers can become difficult at scale, so keep some of these warnings in mind:</p>\n<ul>\n<li>caching can speed up the loading of tiles for users, but may slow down updating data</li>\n<li>clustering at high zoom levels with large amounts of data can cause issues; it may help to disable clustering entirely in favor of custom styling</li>\n<li>it may be necessary with some datasets to use an external tileserver, as there are some issues with TileStache <ul>\n<li><a href="http://geoserver.org/">GeoServer</a> may be a nice simple option (good UI)</li>\n<li>other options can be found <a href="https://github.com/mapbox/awesome-vector-tiles">here</a></li>\n</ul>\n</li>\n</ul>\n'},383:function(e,n){e.exports='\x3c!-- sectionTitle: Module 10: Creating a Package --\x3e\n<h1 id="module-10">Module 10</h1>\n<h2 id="packaging-it-all-up">Packaging it all up</h2>\n<hr>\n<h2 id="lab-overview">Lab Overview</h2>\n<p>Create a package from your project to share your customizations:</p>\n<ul>\n<li>Create a new package</li>\n<li>Migrate extensions and data from the training project</li>\n<li>Create a new GitHub repository from your package</li>\n<li>Create a new project and test your package load from GitHub</li>\n</ul>\n<hr>\n<h2 id="why-create-a-package">Why create a package</h2>\n<ul>\n<li>to share your customizations/extensions</li>\n<li>to allow for easy redeployment of an Arches application</li>\n<li>to share resource models or instance data across deployments</li>\n</ul>\n<hr>\n<h2 id="create-a-package">Create a package</h2>\n<p>First, we must create a package into which we will add our extensions and data (update the path accordingly):</p>\n<pre><code class="lang-bash">python manage.py packages -o create_package -d /Full/path/to/mypackage\n</code></pre>\n<hr>\n<h2 id="create-a-package-demo-">Create a package (demo)</h2>\n<hr>\n<h2 id="package-extensions-and-data">Package extensions and data</h2>\n<ul>\n<li><code>business_data</code> - business data to be loaded with this package<ul>\n<li><code>files</code>, <code>relations</code>, <code>resource_views</code></li>\n</ul>\n</li>\n<li><code>extensions</code> - package extensions/customizations<ul>\n<li><code>functions</code>, <code>datatypes</code>, <code>widgets</code></li>\n</ul>\n</li>\n<li><code>graphs</code> - package graphs by type<ul>\n<li><code>branches</code>, <code>resource_models</code></li>\n</ul>\n</li>\n<li><code>map_layers</code> - project map layers, (mapbox and tileserver layers)<ul>\n<li><code>mapbox_styles</code>, <code>tile_server</code><ul>\n<li><code>overlays</code>, <code>basemaps</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>preliminary_sql</code> - sql files to be executed on load</li>\n<li><code>system_settings</code> - package system settings</li>\n<li>(more information can be found <a href="https://arches.readthedocs.io/en/stable/projects-and-packages/#creating-a-new-package">here</a>)</li>\n</ul>\n<hr>\n<h2 id="migrate-extensions-and-data">Migrate extensions and data</h2>\n<ul>\n<li><code>data</code> &gt; <code>business_data</code></li>\n<li>(<code>widgets</code>, <code>card_components</code>, <code>reports</code>, <code>datatypes</code>) &gt; <code>extensions</code></li>\n<li><code>graphs</code> &gt; <code>graphs</code></li>\n<li><code>map_layers</code> &gt; <code>map_layers</code></li>\n<li><code>sql</code> &gt; <code>preliminary_sql</code></li>\n</ul>\n<hr>\n<h2 id="migrate-extensions-and-data-demo-">Migrate extensions and data (demo)</h2>\n<hr>\n<h2 id="upload-your-package-to-github-demo-">Upload your package to GitHub (demo)</h2>\n<hr>\n<h2 id="create-a-project-and-load-package">Create a project and load package</h2>\n<p>Now, we can create a project and load our package to test (update the URL to match your repository):</p>\n<pre><code class="lang-bash">arches-project create testproject\npython manage.py packages -o load_package -s https://github.com/user/repo/branch.zip -db true\n</code></pre>\n<hr>\n<h2 id="create-a-project-and-load-package-demo-">Create a project and load package (demo)</h2>\n<hr>\n<h1 id="thanks-">Thanks!</h1>\n'},384:function(e,n,t){"use strict";t.r(n);var o=t(11),a=t.n(o);a.a.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"triple-quoted-string":{pattern:/("""|''')[\s\S]+?\1/,greedy:!0,alias:"string"},string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},keyword:/\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/,punctuation:/[{}[\];(),.:]/};var i={variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\([^)]+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},/\$(?:[\w#?*!@]+|\{[^}]+\})/i]};a.a.languages.bash={shebang:{pattern:/^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/,alias:"important"},comment:{pattern:/(^|[^"{\\])#.*/,lookbehind:!0},string:[{pattern:/((?:^|[^<])<<\s*)["']?(\w+?)["']?\s*\r?\n(?:[\s\S])*?\r?\n\2/,lookbehind:!0,greedy:!0,inside:i},{pattern:/(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\1)[^\\])*\1/,greedy:!0,inside:i}],variable:i.variable,function:{pattern:/(^|[\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&])(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\s;|&])/,lookbehind:!0},boolean:{pattern:/(^|[\s;|&])(?:true|false)(?=$|[\s;|&])/,lookbehind:!0},operator:/&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];]/};var l=i.variable[1].inside;l.string=a.a.languages.bash.string,l.function=a.a.languages.bash.function,l.keyword=a.a.languages.bash.keyword,l.boolean=a.a.languages.bash.boolean,l.operator=a.a.languages.bash.operator,l.punctuation=a.a.languages.bash.punctuation,a.a.languages.shell=a.a.languages.bash,a.a.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:TRUE|FALSE|NULL)\b/i,number:/\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},a.a.languages.json={property:/"(?:\\.|[^\\"\r\n])*"(?=\s*:)/i,string:{pattern:/"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,greedy:!0},number:/-?\d+\.?\d*([Ee][+-]?\d+)?/,punctuation:/[{}[\],]/,operator:/:/g,boolean:/\b(?:true|false)\b/i,null:/\bnull\b/i},a.a.languages.jsonp=a.a.languages.json,a.a.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d+.*$/m],deleted:/^[-<].*$/m,inserted:/^[+>].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:"important"}},a.a.languages.diffko={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d+.*$/m],deleted:/^[-].*$/m,inserted:/^[+].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:"important"}},console.log(a.a.languages)},386:function(e,n,t){var o=t(387);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(52)(o,a);o.locals&&(e.exports=o.locals)},387:function(e,n,t){}},[[146,5,3]],[4]]);