(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{146:function(e,n,t){t(147),t(431),t(425),e.exports=t(426)},369:function(e,n,t){var o={"./00-title.md":370,"./01-precourse-deployment/01-title.md":371,"./01-precourse-deployment/02-module-overview.md":372,"./01-precourse-deployment/03-deployment-considerations.md":373,"./01-precourse-deployment/04-platform-options-hosting-location.md":374,"./01-precourse-deployment/05-platform-options-hosting-architecture.md":375,"./01-precourse-deployment/06-platform-options-hosting-operating-system.md":376,"./01-precourse-deployment/07-platform-options-hosting-webserver.md":377,"./01-precourse-deployment/08-platform-options-hosting-cloud.md":378,"./01-precourse-deployment/09-best-practices.md":379,"./01-precourse-deployment/10-optimization-options.md":380,"./01-precourse-deployment/11-examples.md":381,"./01-precourse-deployment/12-takeaway.md":382,"./01-precourse-deployment/13-further-reading.md":383,"./02-precourse-knockout.md":384,"./03-precourse-django.md":385,"./04-module1/01-title.md":386,"./04-module1/02-lesson-overview.md":387,"./04-module1/03-lesson-goals.md":388,"./04-module1/04-arches-design-goals.md":389,"./04-module1/05-core-technologies.md":390,"./04-module1/06-managing-dependencies.md":391,"./04-module1/07-contributing-to-arches.md":392,"./04-module1/08-elasticsearch.md":393,"./04-module1/08-graphs.md":394,"./04-module1/09-datatypes.md":395,"./04-module1/09-resource-instances.md":396,"./04-module1/10-ui-representation.md":397,"./04-module1/11-functions.md":398,"./04-module1/12-code-organization.md":399,"./04-module1/13-packages.md":400,"./05-module2/01-title.md":401,"./05-module2/02-lesson-overview.md":402,"./05-module2/03-datatypes-overview.md":403,"./05-module2/04-datatypes-overview-2.md":404,"./05-module2/05-storage.md":405,"./05-module2/06-storage-2.md":406,"./05-module2/07-code.md":407,"./05-module2/08-code-2.md":408,"./05-module2/09-code-3.md":409,"./05-module2/10-code-4.md":410,"./05-module2/11-when-to-use.md":411,"./06-module3/01-title.md":412,"./06-module3/02-lesson-overview.md":413,"./07-module-4.md":414,"./09-module9/00-title.md":415,"./09-module9/01-lesson-goals.md":416,"./09-module9/02-projects-overview.md":417,"./09-module9/03-create-project.md":418,"./09-module9/04-projects-directory-structure.md":419,"./09-module9/05-packages-overview.md":420,"./09-module9/06-create-package.md":421,"./09-module9/07-packages-directory-structure.md":422,"./09-module9/08-packages-details.md":423,"./09-module9/09-additional-package-commands.md":424};function i(e){var n=a(e);return t(n)}function a(e){var n=o[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=369},370:function(e,n){e.exports='<h1 id="arches-developer-training">Arches Developer Training</h1>\n<h2 id="fall-2018">Fall 2018</h2>\n'},371:function(e,n){e.exports='\x3c!-- sectionTitle: Pre-course: Arches Deployment Considerations --\x3e\n<h1 id="arches-deployment-considerations">Arches Deployment Considerations</h1>\n<h2 id="background-information">Background Information</h2>\n'},372:function(e,n){e.exports='<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this module we will briefly discuss hosting considerations for Arches \ndeployment, a few of the decision points, and provide abundant links for further\nresearch and exploration. </p>\n<h4 id="topics-">Topics:</h4>\n<ul>\n<li>Deployment Considerations</li>\n<li>Platform Options</li>\n<li>High Usage optimization options</li>\n<li>Hosted Examples</li>\n<li>Takeaway</li>\n</ul>\n'},373:function(e,n){e.exports='<h2 id="deployment-considerations-">Deployment considerations:</h2>\n<ul>\n<li>What are the organizational specific considerations?<ul>\n<li>Are there institutional hosting requirements? Is in-house hosting required? Is there sufficient in-house resources to manage an in-house solution? Is there existing in-house expertise in hosting?</li>\n<li>Is there existing in-house experience with a specific cloud? AWS? Azure?</li>\n</ul>\n</li>\n<li>How much usage is expected?<ul>\n<li>How many people will be searching? editing? creating reports?</li>\n</ul>\n</li>\n<li>What Resource Models being used?<ul>\n<li>Is the data file heavy (Images, PDFs, etc)?</li>\n<li>How deeply nested is the Resource Model?</li>\n</ul>\n</li>\n</ul>\n'},374:function(e,n){e.exports='<h2 id="platform-options-location">Platform Options: Location</h2>\n<ul>\n<li>In House:<ul>\n<li>Requires managing physical servers and networking infrastructure</li>\n<li>Requires higher quality internet connection to the server</li>\n<li>Less flexible to grow with increase in usage</li>\n<li>Often has a fixed up front cost</li>\n</ul>\n</li>\n<li>Cloud Hosting:<ul>\n<li>Requires managing virtual servers</li>\n<li>Requires specific training for different cloud platforms</li>\n<li>More flexible to grow with increase in usage</li>\n<li>Often has an ongoing monetary cost</li>\n</ul>\n</li>\n</ul>\n'},375:function(e,n){e.exports='<h2 id="platform-options-architecture">Platform Options: Architecture</h2>\n<ul>\n<li>Single Server:<ul>\n<li>Simple deployment and setup</li>\n<li>Allows all Arches dependancies to be easily accessible on one server</li>\n<li>Less flexible to grow with increase in usage</li>\n</ul>\n</li>\n<li>Distributed Architecture:<ul>\n<li>More complex deployment and setup</li>\n<li>Can lower costs with running multiple instances of Arches</li>\n<li>Higher performance</li>\n<li>More flexible to grow with increase in usage</li>\n</ul>\n</li>\n</ul>\n'},376:function(e,n){e.exports='<h2 id="platform-options-operating-system">Platform Options: Operating System</h2>\n<p>All platforms require specific knowledge and experience to maintain. </p>\n<p>Each platform has both positives and negatives associated with them.</p>\n<ul>\n<li>Linux:<ul>\n<li>Most widely supported and used OS to host Arches</li>\n<li>All Arches dependancies have been tested and work as expected</li>\n</ul>\n</li>\n<li>Docker:<ul>\n<li>Obfuscates management commands in a container</li>\n<li>Can be hosted on Container Platforms</li>\n</ul>\n</li>\n<li>Windows:<ul>\n<li>Least used OS to host Arches.</li>\n<li>Some features are not available, including generating Raster Tiles</li>\n<li>Difficult to set up, must use IIS.</li>\n</ul>\n</li>\n</ul>\n'},377:function(e,n){e.exports='<h2 id="platform-options-web-server">Platform Options: Web Server</h2>\n<ul>\n<li>Apache:<ul>\n<li>Traditional Open Source Web Server</li>\n<li>Everything and the kitchen sink</li>\n<li><a href="https://arches.readthedocs.io/en/stable/serving-arches-with-apache/">Serving Arches with Apache</a> </li>\n</ul>\n</li>\n<li>Nginx:<ul>\n<li>Currently used with provided Docker-Compose</li>\n<li>New. Lean. Small.</li>\n<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04">Serving django with nginx</a> </li>\n</ul>\n</li>\n<li>IIS (Windows only):<ul>\n<li>Currently must be used when installing on Arches on Windows</li>\n</ul>\n</li>\n</ul>\n'},378:function(e,n){e.exports='<h2 id="platform-options-cloud-services">Platform Options: Cloud Services</h2>\n<p>All Cloud Services require specific knowledge and experience to maintain.</p>\n<p>Each Cloud Service has both positives and negatives associated with them.</p>\n<ul>\n<li>AWS:<ul>\n<li>Farallon&#39;s hosting service of choice</li>\n<li><a href="https://aws.amazon.com/rds/">Hosted PostgreSQL (RDS)</a>, <a href="https://aws.amazon.com/elasticsearch-service/">Hosted ElasticSearch</a>, <a href="https://aws.amazon.com/s3/">Hosted Data Storage</a></li>\n</ul>\n</li>\n<li>Azure:<ul>\n<li><a href="https://azure.microsoft.com/en-us/services/postgresql/">Hosted PostgreSQL</a></li>\n<li>Can be integrated with internal Microsoft Resources such as Active Directory</li>\n</ul>\n</li>\n<li>Others (DigitalOcean, Google Cloud, ...):<ul>\n<li>Unknown ability to host Arches in a distributed manner</li>\n</ul>\n</li>\n</ul>\n'},379:function(e,n){e.exports='<h2 id="best-practice-for-deployments">Best Practice for Deployments</h2>\n<ul>\n<li>SSL/Encryption<ul>\n<li>The web is moving towards encryption. Deploy with an SSL certificate! See <a href="https://letsencrypt.org/">Let&#39;s Encrypt</a>.</li>\n</ul>\n</li>\n<li>Projects/Packages:<ul>\n<li>Arches supports the loading of Packages into Projects. Host the Package in a git repo and use the <a href="https://arches.readthedocs.io/en/stable/command-line-reference/#loading-a-package-into-a-project"><code>load_package</code></a> command.</li>\n</ul>\n</li>\n<li>Back up. Back up. Back up.</li>\n<li>Ensure PostgreSQL is properly setup and tuned with sufficient security settings.</li>\n<li>Ensure <a href="https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/#email-backend-and-related-settings">sending of emails</a> has been configured correctly </li>\n<li>Set up monitoring. On AWS, See <a href="https://aws.amazon.com/cloudwatch/">Cloudwatch</a></li>\n</ul>\n'},380:function(e,n){e.exports='<h2 id="optimization-for-deployment">Optimization for Deployment</h2>\n<ul>\n<li>PostgreSQL<ul>\n<li>Setup Logging, Autovacuuming, tweak <code>work_mem</code>. Consider running a Hosted PostgreSQL setup to avoid too much tweaking. </li>\n</ul>\n</li>\n<li>Projects/Packages:<ul>\n<li>Arches supports the loading of Packages into Projects. Host the Package in a git repo and use the <a href="https://arches.readthedocs.io/en/stable/command-line-reference/#loading-a-package-into-a-project"><code>load_package</code></a> command.</li>\n</ul>\n</li>\n<li>Set up and tune <a href="https://docs.djangoproject.com/en/1.11/topics/cache/">django caching</a> through testing.</li>\n</ul>\n'},381:function(e,n){e.exports='<h2 id="example-deployments">Example Deployments</h2>\n<ul>\n<li>Lincoln Arcade - <a href="https://arcade.lincoln.gov.uk">https://arcade.lincoln.gov.uk</a><ul>\n<li>Distributed Architecture</li>\n</ul>\n</li>\n<li>Arches V4 Demo Site - <a href="http://v4demo.archesproject.org">http://v4demo.archesproject.org</a><ul>\n<li>Single Server</li>\n</ul>\n</li>\n</ul>\n'},382:function(e,n){e.exports='<h2 id="deployment-takeaways">Deployment Takeaways</h2>\n<ul>\n<li>Every deployment is different. <ul>\n<li>There are a lot of decisions to be made regarding production deployments, ranging from usage, redundancy requirements, to the complexity of resource models.</li>\n</ul>\n</li>\n<li>The Arches Development Team typically follows the following patterns:<ul>\n<li>Cloud Hosting solution unless your organization requires In House hosting</li>\n<li>Distributed Architecture provides a more robust ability to expand with usage and re-use resources.</li>\n<li>Linux/Docker allows quick deployment and dependancies that have been tested to work.</li>\n<li>AWS is the cloud that is most widely used among the Development Team.</li>\n</ul>\n</li>\n<li>See <a href="https://www.archesproject.org/implementation-considerations/">Arches Implementation Considerations</a></li>\n</ul>\n'},383:function(e,n){e.exports='<h2 id="further-reading">Further Reading</h2>\n<p>Django on AWS:</p>\n<ul>\n<li><a href="https://aws.amazon.com/getting-started/projects/deploy-python-application/">Deploy a highly available Python Web App on AWS</a></li>\n<li><a href="https://www.agiliq.com/blog/2014/08/deploying-a-django-app-on-amazon-ec2-instance/">Deploying a Django app on Amazon EC2 instance (includes autoscaling and load balancing)</a></li>\n<li><a href="https://www.scribd.com/doc/54883641/Scaling-Django-Apps-With-Amazon-AWS">Scaling django on AWS</a>\nUsing AWS S3:</li>\n<li><a href="https://github.com/archesproject/arches/wiki/Storing-Media-on-AWS-S3">Storing Media on AWS S3 (Arches Wiki)</a></li>\n<li><a href="https://groups.google.com/forum/#!topic/archesproject/QHKqMISRkV8">Deleting S3 assets for Arches (Arches Forum)</a>\nMonitoring: </li>\n<li><a href="http://www.kidstrythisathome.com/2017/03/django-logging-with-aws-cloudwatch-and-watchtower.html">Setup django with AWS Cloudwatch</a></li>\n</ul>\n'},384:function(e,n){e.exports='\x3c!-- sectionTitle: KnockoutJS Intro --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="knockoutjs">KnockoutJS</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this lesson we will briefly discuss each of the following Knockout concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>View Models</li>\n<li>Data binding</li>\n<li>Computeds &amp; subscriptions</li>\n<li>Control flow</li>\n<li>Scope</li>\n<li>Components</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<p>To gain a basic understanding of what KnockoutJS is and how the framework is used in Arches</p>\n<hr>\n<h2 id="what-is-knockout-">What is Knockout?</h2>\n<ul>\n<li>JavaScript library for building web applications</li>\n<li><a href="https://knockoutjs.com/documentation/introduction.html">Documentation can be found here</a></li>\n<li><a href="http://learn.knockoutjs.com/">There are also some good tutorials</a></li>\n<li>Easy to learn</li>\n<li>Non-prescriptive regarding application architecture</li>\n<li>Simple to extend with custom bindings</li>\n<li>Allows users to work on isolated parts of the UI with &quot;components&quot;</li>\n</ul>\n<hr>\n<h2 id="model-view-view-model-mvvm-">Model-View-View Model (MVVM)</h2>\n<p>MVVM is a design pattern for building complex applications. KnockoutJS uses this pattern</p>\n<ul>\n<li><strong>model</strong>: &quot;your application’s stored data.&quot;</li>\n<li><strong>view model</strong>: &quot;a pure-code representation of the data and operations on a UI&quot;</li>\n<li><strong>view</strong>: &quot;a visible, interactive UI representing the state of the view model.&quot; (&quot;your HTML document&quot;)</li>\n</ul>\n<hr>\n<h2 id="a-very-simple-view-model">A very simple View Model</h2>\n<pre><code class="lang-css">.output {\n    background-color: #ddffdd;\n    margin: 25px;\n}\n</code></pre>\n<pre><code class="lang-html">&lt;label&gt;Artist: &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album: &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;div class=&quot;output&quot;&gt;\n    &lt;div data-bind=&quot;text: artist&quot;&gt;&lt;/div&gt;\n    &lt;div data-bind=&quot;text: album&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class="lang-javascript">function ViewModel() {\n    this.artist = ko.observable();\n    this.album = ko.observable();\n};\n\nko.applyBindings(new ViewModel());\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo1-vm.html">demo</a></p>\n<hr>\n<h2 id="bindings">Bindings</h2>\n<ul>\n<li><code>text</code></li>\n<li><code>textInput</code></li>\n<li><code>visible</code></li>\n<li><code>css</code></li>\n<li><code>style</code></li>\n<li><code>attr</code></li>\n<li><code>click</code></li>\n<li><code>event</code></li>\n<li>custom binding handlers</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds">Subscriptions &amp; Computeds</h2>\n<ul>\n<li>Subscription - calls a handler when a single observable changes</li>\n<li>Computeds - a function that returns a value if an observable within it changes</li>\n</ul>\n<hr>\n<h2 id="subscriptions-computeds-view-model">Subscriptions &amp; Computeds: View Model</h2>\n<pre><code class="lang-javascript">var self = this;\nthis.artist = ko.observable(&quot;&quot;);\nthis.album = ko.observable(&quot;&quot;);\nthis.albums = ko.observableArray([]);\n\nthis.addAlbum = function(){\n    self.albums.push({\n        artist: self.artist(),\n        album: self.album()\n    });\n};\n\nthis.albums.subscribe(function(albums){\n    console.log(&#39;albums added:&#39;, albums);\n});\n\nthis.lastChange = ko.computed(function() {    \n    var albums = self.albums();\n    if (albums.length &gt; 0) {\n        var currentItem = albums[albums.length-1];\n        return &quot;You added &quot; + currentItem.artist + &quot;, &quot; + currentItem.album;\n    }\n    return &#39;&#39;;\n});\n</code></pre>\n<hr>\n<h2 id="subscriptions-computeds-html">Subscriptions &amp; Computeds: HTML</h2>\n<p>We can bind to our computed, as we would with an observable:</p>\n<pre><code class="lang-html">&lt;label&gt;Artist:  &lt;input data-bind=&quot;textInput: artist&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;label&gt;Album:  &lt;input data-bind=&quot;textInput: album&quot;&gt;&lt;/input&gt;&lt;/label&gt;\n&lt;button data-bind=&quot;click: addAlbum&quot;&gt;Add&lt;/button&gt;\n&lt;p data-bind=&quot;text: lastChange&quot;&gt;&lt;/p&gt; &lt;!-- Our computed --&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo2-bindings.html">demo</a></p>\n<hr>\n<h2 id="control-flow">Control flow</h2>\n<ul>\n<li>Knockout provides bindings for managing control flow</li>\n<li><code>foreach</code>, <code>if</code>, <code>ifnot</code>, <code>with</code></li>\n<li>can be &quot;virtual&quot; (as comments) or inline (via <code>data-bind</code>)</li>\n</ul>\n<pre><code class="lang-html">&lt;div data-bind=&quot;if: someBooleanValue&quot;&gt;&lt;/div&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;This item always appears&lt;/li&gt;\n    &lt;!-- ko ifnot: someBooleanValue --&gt;\n        &lt;li&gt;display this line&lt;/li&gt;\n    &lt;!-- /ko --&gt;\n&lt;/ul&gt;\n\n</code></pre>\n<hr>\n<h2 id="components">Components</h2>\n<ul>\n<li>Composed of a template and a view model</li>\n<li>Reusable within an application</li>\n<li>Registering a component:<pre><code class="lang-javascript">ko.components.register(&#39;album-list&#39;, {\n  viewModel: {\n      require: &#39;js/album-list&#39;\n  },\n  template: {\n      require: &#39;text!templates/album-list.html&#39;\n  }\n});\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="declaring-a-component">Declaring a component</h2>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo3-components-intro.html">demo</a></p>\n<hr>\n<h2 id="using-multiple-components">Using multiple components</h2>\n<p>Different components can be used to represent the same data differently:</p>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list-simple&quot;,\n    params: {\n        title: &quot;Component 1&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Component 2&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo4-components.html">demo</a></p>\n<hr>\n<h2 id="reusing-components">Reusing Components</h2>\n<p>Components can be reused within an application with different data &amp; configurations:</p>\n<pre><code class="lang-html">&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Component&quot;,\n        albumlist: albums\n    }\n}&#39;&gt;&lt;/div&gt;\n\n&lt;div data-bind=&#39;component: {\n    name: &quot;album-list&quot;,\n    params: {\n        title: &quot;Same component&quot;,\n        albumlist: albums,\n        showCount: true\n    }\n}&#39;&gt;&lt;/div&gt;\n</code></pre>\n<pre><code class="lang-html">&lt;!--ko if: showCount --&gt;\n    &lt;div style=&quot;padding-top: 10px&quot; data-bind=&quot;text: &#39;Album count: &#39; + albums().length&quot;&gt;&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n<p><a href="https://archesproject.github.io/arches-dev-training-demos/knockout/demo5-components.html">demo</a></p>\n'},385:function(e,n){e.exports='\x3c!-- sectionTitle: Django Intro --\x3e\n\x3c!-- background: jellybean --\x3e\n<h1 id="django">Django</h1>\n<h2 id="an-introduction">an Introduction</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<p>In this lesson we will briefly discuss each of the following Django concepts with examples and an explanation of how they are used in Arches</p>\n<ul>\n<li>Models/Proxy Models</li>\n<li>Views</li>\n<li>Routing</li>\n<li>Templates</li>\n<li>Projects</li>\n<li>Settings</li>\n<li>Apps</li>\n<li>Management Commands</li>\n</ul>\n<hr>\n<h2 id="lesson-goals">Lesson Goals</h2>\n<p>To have a basic understanding of Django and how the framework is applied in Arches</p>\n<p>Django has a great tutorial, but it take longer than this session.\nHowever, if you&#39;re new to Django, it would\nbe worth the time to do it.</p>\n<hr>\n<h2 id="what-is-django-">What is Django?</h2>\n<ul>\n<li>&quot;The web framework for perfectionists with deadlines&quot;</li>\n<li>Full-featured Python server-side web framework.</li>\n<li>Strong documentation &amp; community</li>\n<li>Features:<ul>\n<li>Authentication</li>\n<li>ORM and database migrations</li>\n<li>Template language</li>\n<li>Admin interface</li>\n<li>Internationalization/Localization</li>\n<li>Development server</li>\n<li>Support for spatial data</li>\n<li>Email/Messaging</li>\n<li>and more ...</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="virtualenv">VirtualEnv</h2>\n<p>Django projects are typically run inside of a virtual environment</p>\n<pre><code class="lang-bash">pip install virtualenv\nvirtualenv env\nsource env/bin/activate\npip install django\n</code></pre>\n<hr>\n<h2 id="models-models-py-">Models (<code>models.py</code>)</h2>\n<p>Models are Django&#39;s object representation of your database schema:</p>\n<pre><code class="lang-python">class DDataType(models.Model):\n    datatype = models.TextField(primary_key=True)\n    defaultwidget = models.ForeignKey(db_column=&#39;defaultwidget&#39;, to=&#39;Widget&#39;, null=True)\n    isgeometric = models.BooleanField()\n\n    class Meta:\n        managed = True\n        db_table = &#39;d_data_types&#39;\n</code></pre>\n<p><img src="/images/datatype-table.png" alt="Datatype Table"></p>\n<hr>\n<h2 id="migrations">Migrations</h2>\n<p>As your app is developed, models will change. For example you might:</p>\n<ul>\n<li>Add a field</li>\n<li>Remove a field</li>\n<li>Add a constraint</li>\n<li>Rename a field</li>\n<li>etc</li>\n</ul>\n<p>You can update your database with these changes\nby running migrations:</p>\n<ul>\n<li>create a new migration from your models<pre><code class="lang-bash">python manage.py makemigrations\n</code></pre>\n</li>\n<li>run any pending migrations<pre><code class="lang-bash">python manage.py migrate\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2 id="views-views-py-">Views (<code>views.py</code>)</h2>\n<p>Views define how Django handles requests.  Often, views will retrieve data from a model and use that to render a template (HTML):</p>\n<pre><code class="lang-python">@method_decorator(group_required(&#39;Graph Editor&#39;), name=&#39;dispatch&#39;)\nclass GraphDesignerView(GraphBaseView):\n\n    def get(self, request, graphid):\n        datatypes = models.DDataType.objects.all()\n        context[&#39;datatypes&#39;] = datatypes=datatypes\n        return render(request, &#39;graph-designer.htm&#39;, context)\n</code></pre>\n<p>...or they may simply return the model data (JSON):</p>\n<pre><code class="lang-python">class ResourceData(View):\n\n    def get(self, request):\n        datatypes = models.DDataType.objects.all()\n        return JSONResponse(datatypes)\n</code></pre>\n<hr>\n<h2 id="routing-urls-py-">Routing (<code>urls.py</code>)</h2>\n<pre><code class="lang-python">uuid_regex = settings.UUID_REGEX\nurlpatterns = [\n    url(\n        r&#39;^graph_designer/(?P&lt;graphid&gt;%s)$&#39; % uuid_regex,\n        GraphDesignerView.as_view(),\n        name=&#39;graph_designer&#39;\n    ),\n]\n</code></pre>\n<p>For example, if you server is running at localhost:8080, an example of the above URL would look like this:</p>\n<p><a href="http://localhost:8000/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6">http://localhost:8000/graph_designer/ccbd1537-ac5e-11e6-84a5-026d961c88e6</a></p>\n<hr>\n<h2 id="templates">Templates</h2>\n<p>Uses data from a view to render a web page (using the Django template language).</p>\n<p>An example template:</p>\n<pre><code class="lang-html">&lt;ul&gt;\n{% for datatype in datatypes %}\n    &lt;li&gt;{{datatype.datatype}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>The above template might render something like this:</p>\n<pre><code class="lang-html">&lt;ul&gt;\n    &lt;li&gt;file-list&lt;/li&gt;\n    &lt;li&gt;string&lt;/li&gt;\n    &lt;li&gt;number&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<hr>\n<h2 id="django-projects">Django Projects</h2>\n<pre><code>arches/\n    manage.py\n    arches/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n</code></pre><p>BTW, Arches is a Django Project</p>\n<hr>\n<h2 id="settings-settings-py-">Settings (<code>settings.py</code>)</h2>\n<p>Application configuration:</p>\n<pre><code class="lang-python">DEBUG = True\nDATABASES = {\n    &#39;default&#39;: {\n        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\n        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),\n    }\n}\nLANGUAGE_CODE = &#39;en-us&#39;\nTIME_ZONE = &#39;UTC&#39;\n</code></pre>\n<hr>\n<h2 id="admin-and-management-commands">Admin and Management Commands</h2>\n<pre><code class="lang-bash">django-admin startproject mysite\narchesproject create myproject\n</code></pre>\n<pre><code class="lang-bash">python manage.py createsuperuser\npython manage.py startapp mynewapp\npython manage.py runserver\n</code></pre>\n<p>You can easily add custom management commands</p>\n<pre><code class="lang-bash">python manage.py packages -o load_package\npython manage.py es index_database\n</code></pre>\n<hr>\n<h2 id="django-apps">Django Apps</h2>\n<p>A project&#39;s functionality can be divided by subject into <code>Apps</code>\nThis is where our models and views go:</p>\n<pre><code>app/\n    __init__.py\n    admin.py #registers app with admin page\n    apps.py  #app configuration file\n    migrations/  #migration files\n        __init__.py\n    models.py\n    tests.py\n    views.py\n</code></pre><p>The Admin page is a good example of a Django app.</p>\n<hr>\n<h2 id="piecing-it-together">Piecing it together</h2>\n<ol>\n<li>Create a project</li>\n<li>Modify your settings (particularly db settings)</li>\n<li>Create a super user</li>\n<li>Create an app</li>\n<li>Register your app in settings</li>\n<li>Write your models -&gt; migrate</li>\n<li>Write your templates, views, and urls (and tests)</li>\n</ol>\n'},386:function(e,n){e.exports='\x3c!-- sectionTitle: Module 1: The Arches Platform --\x3e\n<h1 id="module-1">Module 1</h1>\n<h2 id="the-arches-platform">The Arches Platform</h2>\n<h2 id="and">and</h2>\n<h2 id="core-technical-concepts">Core Technical Concepts</h2>\n'},387:function(e,n){e.exports='<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>Describe core technologies and concepts in Arches</li>\n<li>Review standards for contributing to Arches</li>\n<li>Explain different ways of extending Arches</li>\n</ul>\n'},388:function(e,n){e.exports='<h2 id="lesson-goals">Lesson Goals</h2>\n<ul>\n<li>Understand the basic architecture of Arches</li>\n<li>Be familiar with Arches concepts and nomenclature</li>\n<li>Understand how developers contribute to Arches</li>\n<li>Be aware of the ways in which you can extend Arches</li>\n<li>Understand how Arches applications and packages are related</li>\n<li>Know where to find more help</li>\n</ul>\n'},389:function(e,n){e.exports='<h2 id="design-goals">Design Goals</h2>\n<ul>\n<li>Open Source</li>\n<li>Multi-language</li>\n<li>Standards based<ul>\n<li>CRM - Conceptual Reference Model (<a href="http://www.cidoc-crm.org/">http://www.cidoc-crm.org/</a>)</li>\n</ul>\n</li>\n<li>Graph Data Structure<ul>\n<li>Supports concept management</li>\n<li>Allows for a dynamic logical data model (graph) with a static physical model (db schema)</li>\n<li>PostgreSQL(relational + JSON) ideal for its spatial capabilities</li>\n</ul>\n</li>\n<li>Interoperable: Data could be used in other systems</li>\n<li>These qualities make Arches highly adaptable to different use cases and geographic contexts</li>\n</ul>\n'},390:function(e,n){e.exports='<h2 id="core-technologies-and-system-architecture">Core Technologies and System Architecture</h2>\n<ul>\n<li>Django: server-side web framework</li>\n<li>PostgreSQL/PostGIS: Data store of record (as opposed to the Elasticsearch index)</li>\n<li>Elasticsearch (requires Java): Indexes business data to support search</li>\n<li>TileStache: serves and caches vector and raster tiles</li>\n<li>Knockout.js: UI framework</li>\n</ul>\n'},391:function(e,n){e.exports='<h2 id="managing-dependencies">Managing dependencies</h2>\n<ul>\n<li>PIP</li>\n<li>Node/Yarn</li>\n<li>Require.js</li>\n</ul>\n'},392:function(e,n){e.exports='<h2 id="contributing-to-arches">Contributing to Arches</h2>\n<ul>\n<li>Communicating about development issues:<ul>\n<li>Ask questions on the forum: <a href="https://groups.google.com/forum/#!forum/archesproject">https://groups.google.com/forum/#!forum/archesproject</a></li>\n<li>Write a ticket on GitHub: <a href="https://github.com/archesproject/arches">https://github.com/archesproject/arches</a></li>\n</ul>\n</li>\n<li>Coding Conventions:<ul>\n<li>PEP 8</li>\n<li>ESlint: &#39;recommended&#39;</li>\n</ul>\n</li>\n<li>Writing documentation:<ul>\n<li>Documentation is in a dedicated repo</li>\n<li>Written in restructured text</li>\n<li>Converted to HTML using Sphinx</li>\n</ul>\n</li>\n<li>Submitting pull requests:</li>\n<li>Developer Code of Conduct</li>\n</ul>\n'},393:function(e,n){e.exports='<h2 id="elasticsearch">Elasticsearch</h2>\n<p>What is it used for?</p>\n<p>How can I inspect my data?</p>\n'},394:function(e,n){e.exports='<h2 id="graphs">Graphs</h2>\n<ul>\n<li>Resource Models<ul>\n<li>The blueprint of a resource instance</li>\n<li>Conceptually similar to a class in an object-oriented programming language</li>\n<li>Composed of a root node and one or more branches</li>\n</ul>\n</li>\n<li>Branches<ul>\n<li>Building blocks of a resource model</li>\n<li>Generally composed of nodes of a particular theme</li>\n<li>Nodes on a branch that share the same parent comprise a Nodegroup</li>\n</ul>\n</li>\n<li>Nodes<ul>\n<li>The smallest unit of a resource model</li>\n<li>Semantic or data collecting</li>\n</ul>\n</li>\n<li>Edges<ul>\n<li>Relationships between nodes.</li>\n<li>In some cases has a relationship with its parent defined</li>\n</ul>\n</li>\n</ul>\n'},395:function(e,n){e.exports='<h2 id="datatypes">Datatypes</h2>\n<p>Define how data are managed for a given node; some examples include:</p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Date</li>\n<li>Concept</li>\n<li>Domain</li>\n<li>GeoJson</li>\n</ul>\n<p>Datatypes are responsible for all backend operations, including:</p>\n<ul>\n<li>Validating values prior to save</li>\n<li>Indexing and searching for values in Elasticsearch</li>\n<li>Transforming data on import and export</li>\n</ul>\n'},396:function(e,n){e.exports='<h2 id="resource-instances">Resource Instances</h2>\n<p>JSON objects that store business data for nodegroups</p>\n'},397:function(e,n){e.exports='<h2 id="ui-representation">UI Representation</h2>\n<ul>\n<li>Cards - UI representation of a <strong>nodegroup/tile</strong></li>\n<li>Widgets - UI representation of a <strong>node/value</strong> based on datatype</li>\n<li>A datatype can be represented by different widgets, for example:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">datatype</th>\n<th style="text-align:center">widgets</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">boolean</td>\n<td style="text-align:center">radio, switch, select</td>\n</tr>\n<tr>\n<td style="text-align:center">string</td>\n<td style="text-align:center">input, rich text editor</td>\n</tr>\n<tr>\n<td style="text-align:center">domain</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n<tr>\n<td style="text-align:center">concept</td>\n<td style="text-align:center">radio, select</td>\n</tr>\n</tbody>\n</table>\n'},398:function(e,n){e.exports='<h2 id="functions">Functions</h2>\n<ul>\n<li>Custom data processing operations triggered when Arches retrieves, saves, or deletes data belonging to a specified nodegroup.</li>\n<li>Conceptually, similar to a database trigger.</li>\n<li>Arches only includes one function by default:<ul>\n<li>The display descriptors function</li>\n<li>allows for the definition of names &amp; descriptions for instances of a given resource model</li>\n</ul>\n</li>\n</ul>\n'},399:function(e,n){e.exports='<h2 id="code-organization">Code organization</h2>\n<ul>\n<li>If you&#39;ve used Django, Arches will look very familiar</li>\n<li>Django template file paths and names generally match their javascript counterparts:<ul>\n<li><code>arches/app/templates/views/components/widgets/number.htm</code></li>\n<li><code>arches/app/media/js/views/components/widgets/number.js</code></li>\n</ul>\n</li>\n</ul>\n'},400:function(e,n){e.exports='<h2 id="packages">Packages</h2>\n<ul>\n<li>Organization of files used to implement an Arches application<ul>\n<li>Business data</li>\n<li>Resource models and branches</li>\n<li>Custom cards, datatypes, widgets, report templates</li>\n</ul>\n</li>\n<li>In contrast, a <strong><em>Project</em></strong> is essentially a Django <code>project</code>.</li>\n</ul>\n'},401:function(e,n){e.exports='\x3c!-- sectionTitle: Module 2: Introduction to Datatypes --\x3e\n<h1 id="module-2">Module 2</h1>\n<h2 id="introduction-to-datatypes">Introduction to Datatypes</h2>\n'},402:function(e,n){e.exports='<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>review what datatypes are in Arches<ul>\n<li>what can they do?</li>\n<li>where are datatypes registered?</li>\n<li>what are they in code?</li>\n<li>when do I need a new datatype?</li>\n</ul>\n</li>\n<li>look at code for datatypes built into Arches</li>\n</ul>\n'},403:function(e,n){e.exports='<h2 id="what-are-datatypes-">What are datatypes?</h2>\n<ul>\n<li>a way of representing values in Arches resources</li>\n<li>Arches includes sensible defaults:<ul>\n<li>string</li>\n<li>number</li>\n<li>date</li>\n<li>etc...</li>\n</ul>\n</li>\n<li>consist of backend code for managing data</li>\n<li>can optionally include a front end configuration component</li>\n</ul>\n'},404:function(e,n){e.exports='<h2 id="what-can-datatypes-do-">What can datatypes do?</h2>\n<ul>\n<li>validate incoming data before saving values</li>\n<li>transform values for import/export</li>\n<li>index data to ElasticSearch</li>\n<li>query data in ElasticSearch for advanced searching</li>\n<li>handle incoming request objects (to save files, for example)</li>\n<li>execute logic after data are saved</li>\n<li>provides hooks for Arches native geospatial features<ul>\n<li>tileserver layers</li>\n<li>map overlays</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n'},405:function(e,n){e.exports='<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>Arches stores datatypes in PostgreSQL, in a table called <code>d_data_types</code>, for example...</p>\n<h3 id="query">Query</h3>\n<pre><code class="lang-SQL">SELECT * FROM d_data_types WHERE datatype = &#39;boolean&#39;;\n</code></pre>\n<h3 id="results">Results</h3>\n<div class="db-results">\n    <table>\n        <thead>\n            <tr>\n                <th style="text-align:left">datatype</th>\n                <th style="text-align:left">iconclass</th>\n                <th style="text-align:left">modulename</th>\n                <th style="text-align:left">classname</th>\n                <th style="text-align:left">configcomponent</th>\n                <th style="text-align:left">defaultconfig</th>\n                <th style="text-align:left">configname</th>\n                <th style="text-align:left">isgeometric</th>\n                <th style="text-align:left">defaultwidget</th>\n                <th style="text-align:left">issearchable</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td style="text-align:left">boolean</td>\n                <td style="text-align:left">fa fa-toggle-on</td>\n                <td style="text-align:left">datatypes.py</td>\n                <td style="text-align:left">BooleanDataType</td>\n                <td style="text-align:left">views/components/datatypes/boolean</td>\n                <td style="text-align:left">{&quot;trueLabel&quot;:&quot;Yes&quot;,&quot;falseLabel&quot;:&quot;No&quot;}</td>\n                <td style="text-align:left">boolean-datatype-config</td>\n                <td style="text-align:left">false</td>\n                <td style="text-align:left">10000000-0000-0000-0000-000000000006</td>\n                <td style="text-align:left">true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'},406:function(e,n){e.exports='<h2 id="how-are-datatypes-registered-with-arches-">How are datatypes registered with Arches?</h2>\n<p>The <code>d_data_types</code> table has the following columns:</p>\n<ul>\n<li><code>datatype</code> [string]: the name of the datatype, also the primary key</li>\n<li><code>iconclass</code> [string]: a class (or classes) to be used to render an icon for this datatype</li>\n<li><code>modulename</code> [string]: the python module that defines this datatype</li>\n<li><code>classname</code> [string]: the class that defines this datatype</li>\n<li><code>configcomponent</code> [string]: an optional path to a KO component for configuration</li>\n<li><code>defaultconfig</code> [JSON]: the default configuration for nodes using this datatype</li>\n<li><code>configname</code> [string]: the name of a KO component for configuration</li>\n<li><code>isgeometric</code> [boolean]: use this datatype on maps</li>\n<li><code>defaultwidget</code> [UUID]: a foreign key to the default widget to use with this datatype</li>\n<li><code>issearchable</code> [boolean]: use this datatype in advanced search</li>\n</ul>\n'},407:function(e,n){e.exports='<h2 id="what-are-datatypes-in-code-">What are datatypes in code?</h2>\n<ul>\n<li>Arches represents datatypes on the backend as a Python class<ul>\n<li>should extend <code>arches.app.datatypes.base.BaseDataType</code></li>\n<li>is responsible for all datatype logic</li>\n<li><code>d_data_types.classname</code> defines this class</li>\n<li>module containing this class (<code>d_data_types.modulename</code>) must be in a path contained in <code>settings.DATATYPE_LOCATIONS</code></li>\n</ul>\n</li>\n<li>datatypes can also (optionally) include a Knockout component, used for:<ul>\n<li>configuring nodes to use a datatype</li>\n<li>searching for values of a given datatype in advanced search</li>\n</ul>\n</li>\n</ul>\n'},408:function(e,n){e.exports='<h3 id="example-booleandatatype-python-class">Example: BooleanDataType Python class</h3>\n<pre><code class="lang-python">class BooleanDataType(BaseDataType):\n\n    def validate(self, value, row_number=None, source=&#39;&#39;):\n        errors = []\n\n        try:\n            type(bool(distutils.util.strtobool(str(value)))) is True\n        except:\n            errors.append({\n                &#39;type&#39;: &#39;ERROR&#39;,\n                &#39;message&#39;: &#39;{0} is not of type boolean. This data was not imported.&#39;.format(value)\n            })\n\n        return errors\n\n    def transform_import_values(self, value, nodeid):\n        return bool(distutils.util.strtobool(str(value)))\n\n    def append_search_filters(self, value, node, query, request):\n        try:\n            if value[&#39;val&#39;] != &#39;&#39;:\n                term = True if value[&#39;val&#39;] == &#39;t&#39; else False\n                query.must(Term(field=&#39;tiles.data.%s&#39; % (str(node.pk)), term=term))\n        except KeyError, e:\n            pass\n</code></pre>\n'},409:function(e,n){e.exports='<h3 id="example-booleandatatype-configuration-js">Example: BooleanDataType configuration JS</h3>\n<pre><code class="lang-javascript">define([&#39;knockout&#39;], function(ko) {\n    var name = &#39;boolean-datatype-config&#39;;\n    ko.components.register(name, {\n        viewModel: function(params) {\n            var self = this;\n            var config = params.config ? params.config : params.node.config;\n\n            this.search = params.search;\n            this.graph = params.graph;\n            this.trueLabel = config.trueLabel;\n            this.falseLabel = config.falseLabel;\n\n            if (this.search) {\n                var filter = params.filterValue();\n                this.searchValue = ko.observable(filter.val || &#39;&#39;);\n                this.filterValue = ko.computed(function() {\n                    return {\n                        val: self.searchValue()\n                    };\n                });\n                params.filterValue(this.filterValue());\n                this.filterValue.subscribe(function(val) {\n                    params.filterValue(val);\n                });\n            }\n        },\n        template: { require: &#39;text!datatype-config-templates/boolean&#39; }\n    });\n    return name;\n});\n</code></pre>\n'},410:function(e,n){e.exports='<h3 id="example-booleandatatype-configuration-html">Example: BooleanDataType configuration HTML</h3>\n<pre><code class="lang-html">{% load i18n %}\n\n&lt;!-- ko if: $data.search --&gt;\n{% block search %}\n&lt;div class=&quot;col-sm-12&quot;&gt;\n    &lt;select class=&quot;resources&quot; data-bind=&quot;value: searchValue, chosen: {\n        width: &#39;100%&#39;,\n        disable_search_threshold: 15\n    }, options: [\n        {id: &#39;t&#39;, name: trueLabel},\n        {id: &#39;f&#39;, name: falseLabel}\n    ], optionsText: &#39;name&#39;, optionsValue: &#39;id&#39;&quot;&gt;&lt;/select&gt;\n&lt;/div&gt;\n{% endblock search %}\n&lt;!-- /ko --&gt;\n\n&lt;!-- ko if: $data.graph --&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;True&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: trueLabel&quot;&gt;\n&lt;/div&gt;\n&lt;div class=&quot;control-label&quot;&gt;\n    {% trans &quot;Label &#39;False&#39;&quot; %}\n&lt;/div&gt;\n&lt;div class=&quot;col-xs-12 pad-no crud-widget-container&quot;&gt;\n    &lt;input class=&quot;form-control input-md widget-input&quot; data-bind=&quot;textInput: falseLabel&quot;&gt;\n&lt;/div&gt;\n&lt;!-- /ko --&gt;\n</code></pre>\n'},411:function(e,n){e.exports='<h2 id="use-a-custom-datatype-when-">Use a custom datatype when...</h2>\n<ul>\n<li>you need to store data structures not currently supported in Arches</li>\n<li>you need to implement custom logic for:<ul>\n<li>validation</li>\n<li>ElasticSearch indexing/querying</li>\n<li>import/export</li>\n<li>handling requests</li>\n</ul>\n</li>\n</ul>\n'},412:function(e,n){e.exports='\x3c!-- sectionTitle: Module 3: Building a Custom Datatype --\x3e\n<h1 id="module-3">Module 3</h1>\n<h2 id="building-a-custom-datatype">Building a Custom Datatype</h2>\n'},413:function(e,n){e.exports='<h2 id="lesson-overview">Lesson Overview</h2>\n<p>- </p>\n'},414:function(e,n){e.exports='\x3c!-- sectionTitle: Module 4: Introduction to Components --\x3e\n<h1 id="module-4">Module 4</h1>\n<h2 id="introduction-to-components-in-arches">Introduction to Components in Arches</h2>\n<hr>\n<h2 id="lesson-overview">Lesson Overview</h2>\n<ul>\n<li>What are Knockout components</li>\n<li>How are they used in Arches</li>\n<li>How are their files organized in Arches</li>\n<li>How are they registered</li>\n</ul>\n<hr>\n<h2 id="knockout-components">Knockout Components</h2>\n<ul>\n<li>Similar to Angular directives or Vue components</li>\n<li>Reusable blocks of UI</li>\n<li>Comprise a javascript view model corresponding html template</li>\n<li>Configurable</li>\n</ul>\n<hr>\n<h2 id="the-role-of-components">The role of components</h2>\n<ul>\n<li><strong>Widgets:</strong>  the UI for a tile</li>\n<li><strong>Card components:</strong>  the UI for a collection of widgets (or a collection of cards)</li>\n<li><strong>Reports:</strong>  the UI for a resource report header and the display of cards</li>\n<li><strong>Functions:</strong>  the UI for function configuration (not covered in this course)</li>\n</ul>\n<p>Lets look at some examples in Arches...</p>\n<hr>\n<h2 id="components-as-extensions-of-arches">Components as extensions of Arches</h2>\n<p>You could override existing components.\nFor example, the map widget&#39;s geocoder is a component.\nIf it does not suit your needs you could simply override the existing one.</p>\n<p>The components we&#39;re covering in this course can <strong><em>extend</em></strong> Arches.\nThey allow you to add to the existing widgets, cards, and reports.</p>\n<hr>\n<h3 id="why-">Why?</h3>\n<ol>\n<li>You need to support a custom datatype</li>\n<li>You want more options in how your data is presented. For example<ul>\n<li>reports - a new kind of header</li>\n<li>widgets - write a map widget with a different library</li>\n<li>card components - arrange your widgets differently or show a summary of their tile values</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id="registering-components">Registering components</h2>\n<p>Knockout loads components from separate files asynchronously using require.js</p>\n<pre><code class="lang-javascript">ko.components.register(&#39;some-component&#39;, {\n    viewModel: { require: &#39;files/some-component&#39; },\n    template: { require: &#39;text!files/some-component.html&#39; }\n});\n</code></pre>\n<p>Arches handles this for you. You simply have to write the files and place where\nArches can find them.</p>\n<p>So, where should you place them?</p>\n<hr>\n<h2 id="component-file-locations">Component file locations</h2>\n<h3 id="templates">Templates</h3>\n<ul>\n<li><code>/templates/views/components/card_components/address-card.html</code></li>\n<li><code>/templates/views/components/reports/address-report.html</code></li>\n<li><code>/templates/views/components/widgets/geocoder.html</code></li>\n</ul>\n<h3 id="view-models">View Models</h3>\n<ul>\n<li><code>/media/js/views/components/card_components/address-card.js</code></li>\n<li><code>/media/js/views/components/reports/address-report.js</code></li>\n<li><code>/media/js/views/components/widgets/geocoder.js</code></li>\n</ul>\n<h3 id="note-the-html-and-js-file-base-names-match">Note: the html and js file base names match</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">View Model</th>\n<th style="text-align:center">Template</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">address-card.js</td>\n<td style="text-align:center">address-card.html</td>\n</tr>\n<tr>\n<td style="text-align:center">address-report.js</td>\n<td style="text-align:center">address-report.html</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id="the-configuration-json-file">The configuration (.json) file</h2>\n<p>In the training project the config files are located here:</p>\n<ul>\n<li><code>/card_components/address-card.json</code></li>\n<li><code>/reports/address-report.json</code></li>\n<li><code>/widgets/geocoder.json</code></li>\n</ul>\n<p>But, the can go anywhere in your project. Ultimately, they will typically\nbe saved in a package.</p>\n<hr>\n<h2 id="the-configuration-json-file">The configuration (.json) file</h2>\n<p>Contents corresponds to what is loaded in Postgres.</p>\n<pre><code class="lang-javascript">{\n    &quot;name&quot;: &quot;geocoder&quot;,\n    &quot;component&quot;: &quot;views/components/widgets/geocoder&quot;,\n    &quot;defaultconfig&quot;: {\n        &quot;placeholder&quot;: &quot;Find an address...&quot;\n    },\n    &quot;helptext&quot;: null,\n    &quot;datatype&quot;: &quot;address&quot;\n}\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ![widget](/images/widget-db-screenshot.png</p>\n<hr>\n<h2 id="registering-components">Registering components</h2>\n<p>Each component has its own management command class:</p>\n<ul>\n<li>arches/management/commands/widget.py</li>\n<li>arches/management/commands/report.py</li>\n<li><p>arches/management/commands/card_component.py</p>\n</li>\n<li><p>$(env) python manage.py widget register -s myproject/widgets/geocoder.json</p>\n</li>\n<li>$(env) python manage.py report register -s myproject/reports/geocoder.json</li>\n<li>$(env) python manage.py card_component register -s myproject/card_components/geocoder.json</li>\n</ul>\n<hr>\n<h2 id="unregistering-components">Unregistering components</h2>\n<p>A compent&#39;s <code>name</code> is unique in Arches and is used as it&#39;s identifier:</p>\n<ul>\n<li>$(env) python manage.py widget unregister -n &#39;geocoder&#39;</li>\n<li>$(env) python manage.py report unregister -n &#39;address-report&#39;</li>\n<li>$(env) python manage.py card_component unregister -n &#39;address-card&#39;</li>\n</ul>\n<hr>\n<h2 id="if-you-forget-the-arguments-">If you forget the  arguments:</h2>\n<p>You can list the arguments using <code>--help</code>. For example:</p>\n<p>To get the names of the commands:\n<code>$(env) python manage.py --help</code></p>\n<p>To get the arguments of a command (widget in this case):\n<code>$(env) python manage.py widget --help</code></p>\n'},415:function(e,n){e.exports='\x3c!-- sectionTitle: Module 9: Projects and Packages --\x3e\n<h1 id="module-9">Module 9</h1>\n<h2 id="projects-and-packages">Projects and Packages</h2>\n'},416:function(e,n){e.exports='<h2 id="lesson-goals">Lesson Goals</h2>\n<ul>\n<li>To understand the distinction between a project and a package</li>\n<li>To be familiar with the directory structure of a project and a package</li>\n<li>To understand how to create and maintain your own project and/or package</li>\n<li>To understand how Arches applications and packages are related</li>\n<li>To know how to host and contribute to a project or package</li>\n</ul>\n'},417:function(e,n){e.exports='<h2 id="projects">Projects</h2>\n<ul>\n<li>Projects facilitate all of the customizations that you will need to make one installation of Arches different from the next</li>\n<li>You can update html to modify web page branding, and add functions, datatypes, and widgets to introduce new functionality</li>\n<li>A project sits outside of your virtual environment, and can thus be transferred to any other system where Arches is installed</li>\n<li>The templates directory holds HTML templates that you can modify to customize the branding and general appearance of your project.</li>\n<li>Many project-specific settings are defined in <code>settings.py</code></li>\n<li>You should use <code>settings_local.py</code> to store variables that you may want to keep out of the public eye (db passwords, API keys, etc.).</li>\n<li>Contains your site specific Django settings</li>\n</ul>\n<pre><code>Project Settings\n├── Package Settings\n     ├── Core Arches Settings\n</code></pre>'},418:function(e,n){e.exports='<h2 id="creating-a-project">Creating a Project</h2>\n<pre><code class="lang-bash">arches-project create mynewproject\n</code></pre>\n'},419:function(e,n){e.exports='<h2 id="project-directory-structure">Project Directory Structure</h2>\n<pre><code>Example Project\n  ├── datatypes\n  ├── functions\n  ├── logs\n  ├── media\n  │   ├── img\n  │   │   └── landing\n  │   ├── js\n  │   │   ├── reports\n  │   │   └── views\n  │   │       └── components\n  │   └── packages\n  ├── node_modules\n  ├── system_settings\n  ├── templates\n  │   └── views\n  │       └── components\n  │           ├── functions\n  │           └── widgets\n  ├── uploadedfiles\n  └── widgets\n</code></pre>'},420:function(e,n){e.exports='<h2 id="packages">Packages</h2>\n<ul>\n<li>A package contains all the data you&#39;d like loaded into your Arches implementation<ul>\n<li>business data</li>\n<li>concepts/reference data</li>\n<li>resource models/branches</li>\n<li>datatypes/functions/widgets</li>\n<li>map layers</li>\n</ul>\n</li>\n<li>Each of these components can be loaded separately</li>\n<li>The whole package can be loaded from local file system or directly from github</li>\n<li>Also contains package specific settings (e.g. load order of business data, date format of business data)</li>\n<li>A local package may be updated if you make changes in your deployment of Arches (eg changes to branches and/or resource models)</li>\n</ul>\n'},421:function(e,n){e.exports='<h2 id="creating-a-package">Creating a Package</h2>\n<pre><code class="lang-bash">python manage.py packages -o create_package -d /Full/path/to/mypackage\n</code></pre>\n'},422:function(e,n){e.exports='<h2 id="package-directory-structure">Package Directory Structure</h2>\n<pre><code>Example Package\n  ├── business_data\n  │   ├── files\n  │   └── relations\n  ├── extensions\n  │   ├── datatypes\n  │   ├── functions\n  │   └── widgets\n  ├── graphs\n  │   ├── branches\n  │   └── resource_models\n  ├── map_layers\n  │   ├── mapbox_spec_json\n  │   │   ├── basemaps\n  │   │   └── overlays\n  │   └── tile_server\n  │       ├── basemaps\n  │       └── overlays\n  ├── preliminary_sql\n  ├── reference_data\n  │   ├── collections\n  │   └── concepts\n  ├── staging_data\n  └── system_settings\n</code></pre>'},423:function(e,n){e.exports='<h2 id="package-config-vs-package-settings">Package Config vs Package Settings</h2>\n<ul>\n<li>Package Settings<ul>\n<li>The django settings relevant to your package not managed in system settings</li>\n<li>used to apply default settings for your package to projects that use it</li>\n<li>This file is copied into your project when the package is loaded.</li>\n</ul>\n</li>\n<li>Package Config<ul>\n<li>This file allows you to configure other parts of the data loading process.</li>\n<li>For example, the order in which the business data files are loaded</li>\n</ul>\n</li>\n</ul>\n'},424:function(e,n){e.exports='<h2 id="package-command-examples">Package command examples</h2>\n<ul>\n<li>update a local package:<pre><code class="lang-bash">python manage.py packages -o update_package -d /Full/path/to/mypackage\n</code></pre>\n</li>\n<li>load a package from GitHub:<pre><code class="lang-bash">python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip\n</code></pre>\n</li>\n<li>override your database when loading a package by adding <code>-db true</code> (careful!):<pre><code class="lang-bash">python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip -db true\n</code></pre>\n</li>\n</ul>\n'},425:function(e,n,t){"use strict";t.r(n);var o=t(51);t.n(o).a.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"triple-quoted-string":{pattern:/("""|''')[\s\S]+?\1/,greedy:!0,alias:"string"},string:{pattern:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},keyword:/\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/,punctuation:/[{}[\];(),.:]/}},427:function(e,n,t){var o=t(428);"string"==typeof o&&(o=[[e.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(52)(o,i);o.locals&&(e.exports=o.locals)},428:function(e,n,t){}},[[146,5,3]],[4]]);